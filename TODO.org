* TODO

** General Items

- [TODO] Figure out how to handle locations with spaces in caption
  - maybe quotes, @"kailua kona" or "@kailua kona"
- [TODO] Additional storage changes to consider
  - Move everything under one directory
    - ./tanuki/assets  <- assets database (documents related only to assets)
    - ./tanuki/masters <- raw file content
    - ./tanuki/thumbs  <- video thumbnails
    - ./tanuki/users   <- users database
  - This would be a one time, manual operation
- [TODO] support wildcards in filename, mimetype (others?)
- [TODO] Editing images
  - Add an "alternates" field to the documents
  - When editing an image (via GraphQL Mutation)
    - Generate a new ULID
    - Add new ULID to "alternates" field in document
    - Rename canonical file to new ULID (in same directory)
    - Write new file to the canonical ULID (document identifier is unchanged)
    - This new file becomes the canonical version
  - Desktop app will facilitate the edits and such
    - Rotate an image
    - "Use this version"
    - "Remove this version" (except for canonical version)
    - Purge all alternates (show how many would be affected)
- [TODO] Need a query to find image assets whose orientation is incorrect/unknown
- [TODO] Asset preview page shows a broken link, should show placeholder image
- [TODO] Add a "people" field
  - Need an admin screen to move a tag from "tags" to "people"
- [TODO] Design the user login and comments system (see "families")
- [TODO] Look for means of ensuring LevelDB data integrity
  - Look into enabling extra LevelDB checks (`paranoidChecks`, `verifyChecksums`)
- [TODO] Use PouchDB/CouchDB replication to keep a local backup
  - Perform backup after N operations, or every T minutes
  - Recovery is to replace corrupted DB with backup
  - Could just be something that is manually invoked as needed
- [TODO] Support HEIC/HEIF file formats
- [TODO] When performing image manipulations, invoke `sharp.withMetadata()` to preserve metadata
- [TODO] Support an "album" for the assets
  - Would be on details/edit page for benefit of uploading
  - Expose on main page as a selector
  - Assets can belong to multiple albums
  - Eventually support "smart" albums based on asset attributes
- [TODO] api to perform database compaction
- [TODO] Extract ID3 tags on incoming audio files
- [TODO] Use a webview to preview Markdown generated as HTML
- [TODO] Health checks
  - Scan all docs to find missing files
  - Find files for which there are no documents

** Interface Improvements

- [TODO] Asset preview should show the media type
- [TODO] Debounce the form input validation (i.e. asset edit and search forms)

** Node.js Rewrite

- [TODO] Review express.js performance guidelines
  - http://expressjs.com/en/advanced/best-practice-performance.html
- [TODO] Figure out how to use layouts with EJS and express.js
  - apparently EJS uses partials instead of a layout
  - Sails.js somehow manages to have real layouts with EJS
- [TODO] Set the `production` flag in `gulpfile.js` based on environment
- [TODO] Look at https://moment.github.io/luxon/docs/ for a nice date/time library
- [TODO] Maybe use https://github.com/expressjs/csurf for CSRF protection
- [TODO] Consider whether server needs a SIGINT handler (as described in pm2 docs)

** Custom queries

- [TODO] Once a user has removed a custom query, invoke PouchDB's `db.viewCleanup()` to clean them up
  - Otherwise you get stale query results

** Productization

- [TODO] Replace the banner image with something that looks good
  - keep in mind it should be small, for mobile devices
- [TODO] Include list of all dependencies and their copyright/license as appropriate
  - fontawesome.io

** Use Cases

*** Families

- [TODO] design the GraphQL schema for:
  - users
  - comments
  - likes
- How might families use the app/web to interact?
- Need user accounts
  - Look for a Node.js/Express middleware to handle authentication
  - Default to "admin party" like CouchDB
    - That is, default user is 'admin' with no password
  - Admin can change the user name and password in app preferences
    - At that point, default login must be disabled
  - Allow blank passwords for simplicity?
  - Need password reminder facility
  - Special permissions on adult vs child accounts?
  - App preferences allows admin to manage accounts
  - App preferences for non-admins would be edit own account only
  - App has trusted access based on OS login (i.e. single-sign-on)
    - Use a cryptographically secure key, not just a username in a config file
    - Without the key, user must log in with credentials
- Comments on assets
  - Format: comment text, user name, date/time
  - Comments are stored in the asset document
  - Search would include comments
  - Edit/Delete for comment author, admin
  - Like for non-authors
- Likes on assets
- Albums/Projects must have permissions
  - Default editable by creator only
- Private albums/projects
  - Flag to indicate visibility only to owner

** Documentation

*** Case Sensitivity

- Data is stored as entered (case preservative)
- Attribute lists are all lowercased
- Search is always case insensitive

*** Date/Time values

- Use 24 hour clock, local time zone (stored as UTC)
- http://www.unicode.org/reports/tr35/tr35-43/tr35-dates.html#Date_Format_Patterns
