* Tanuki
** General Items
*** TODO Rewrite Elm interface using ReasonReact
**** DONE Probably need webpack to produce a single .js file
***** DONE Use https://github.com/shama/webpack-stream to run webpack from gulp
***** DONE Set the output filename to something static
***** DONE Use the watch feature with webpack
**** DONE Need interface with GraphQL backend
***** DONE Install reason-apollo and all of its dependencies
[[https://github.com/apollographql/reason-apollo][apollographql/reason-apollo]]

***** DONE Build a component that displays the available tags
**** DONE Get tag fetching working
**** DONE Organize the code to display the home page
**** DONE Use reductive for the application state management
***** DONE Add ="reductive": "nlfiedler/reductive#render"= to =package.json=
***** DONE Add ="reductive"= to ="bs-dependencies"= in =bsconfig.json=
***** DONE Copy =reduxThunk.re= from reductive examples
***** DONE Copy =middleware.re= from reductive examples
***** DONE Leverage my todomvc example as a starting point
***** DONE Hook provider into links to toggle tags
**** Use reductive to hold non-GraphQL values, Apollo is caching already
***** What goes in reducer components
- edit form
- search form
- showing all tags
- showing all locations
- upload filename

***** What goes in reductive
- pageNumber
- selected tag values
- selected location values
- selected years values
- saved search inputs

***** What lives in apollo cache
- tags
- locations
- years
- asset list
- asset details

**** DONE Use Reason's router instead of Elm navigator
**** DONE Get basic search form working
***** DONE Use [[https://github.com/Astrocoders/reform][reform]] for form validation
***** DONE Use GraphQL to query the assets
***** DONE Show the assets as thumbnail grid
***** DONE Multiple tag search is not working
***** DONE Use [[https://github.com/SllyQ/bs-date-fns][bs-date-fns]] for the date validation
**** DONE Decide where/how to define the page size
**** DONE Get asset fetching working
**** DONE Add thumbnails to home screen
**** DONE Get asset update working
**** DONE Get asset upload working
**** DONE Get pagination working
***** DONE Add the pageNumber to the reductive state
***** DONE Add reductive action to set pageNumber
***** DONE Home component runs query with offset value based on pageNumber
***** Thumbnails.t has the "count" field which is the total number of matching assets
***** DONE Pagination links dispatch reductive action to set pageNumber
***** DONE Reset pageNumber to 1 when [4/4]
- [X] tag selection changes
- [X] year selection changes
- [X] location selection changes
- [X] search input changes
**** TODO Get location fetching working
**** TODO Get year fetching working
**** TODO Get broken thumbnail handling working
**** TODO Load/Save search form inputs using reductive
**** TODO Look for any lingering "elm" references in the code
**** TODO Delete =elm-src=, =elm-stuff=, and =elm-package.json=
**** TODO Compare the generated =bsconfig.json= to the one we have
- Use =bsb -init foobar -theme react= to generate the =bsconfig.json=
**** DONE Remove =ghc= and =cabal= from server
**** DONE Remove =elm= from Homebrew installation
**** TODO Before and After (Elm vs Reason)
***** Be sure to also compare "production" output
***** Elm
:Bundle-size: 560kb
:Line-count: 2624

*** TODO Probably can use =date-fns= instead of =dateformat=
*** TODO Consider how to make thumbnail page responsive
**** Show 2, 3, or more depending on browser width
**** Should be able to leverage CSS for this
*** TODO Consider how to organize webui code from the backend code
Presumably it will all eventually be written in ReasonML, how should the
webui and backend code be separated?

*** TODO URI path for thumbnails and such should be returned in GraphQL data
The front-end should not have to know how to construct the URI path for the
assets, thumbnails, etc. Host and port _cannot_ be in the GraphQL data since
the backend does not know how the front-end is addressing it.

*** TODO When there are no assets, display help screen for getting started
*** TODO Update the node dependencies
*** TODO Rewrite backend code on ReasonML
**** GraphQL portion
[[https://blog.ecliptic.io/a-reasonable-graphql-exploration-part-1-5651f75de497][ecliptic.io part 1]], [[https://blog.ecliptic.io/a-reasonable-graphql-exploration-part-2-3c3b811f7491][part 2]], [[https://blog.ecliptic.io/a-reasonable-graphql-exploration-part-3-b303b375ab23][part 3]], [[https://blog.ecliptic.io/a-reasonable-graphql-followup-192f6ec29550][follow-up]]
- shows how to write the GraphQL backend
- uses Node/Express too
- builds everything up, from types to encoders/decoders
- uses [[https://github.com/glennsl/bs-json][bs-json]] for JSON encode/decode

*** TODO Asset preview should show the media type
*** TODO Debounce the form input validation (i.e. asset edit and search forms)
*** TODO Can gulp-nodemon be removed/replaced? introduces several vulnerabilities
**** Or fork the repo and fix the issue
*** TODO Support searching the caption text
*** TODO Support wildcards in filename, mimetype (others?)
*** TODO Extract exact location information from images [0/4]
- [ ] Write a data migration to process existing assets
- [ ] Incoming needs to extract this information for new assets
- [ ] Existing location values should be stored in "label" field
- [ ] Exact location information should be stored separate from label

*** TODO Need a query to find image assets whose orientation is incorrect/unknown
*** TODO Asset preview page shows a broken link, should show placeholder image
*** TODO Thumbnail size cache population is noticably slow when selecting many assets
*** TODO When performing image manipulations, invoke `sharp.withMetadata()` to preserve metadata
*** TODO Use a webview to preview Markdown generated as HTML
*** TODO Read [[https://github.com/MtDalPizzol/pouchdb-permissions][pouchdb-permissions]] for possible use in user/groups access
*** TODO Detect time zone offset in EXIF data
According to Wikipedia the 2.31 version of EXIF will support time-zone
information. Eventually, the application should be able to detect this and
include it in the database records.

: There is no way to record time-zone information along with the time, thus
: rendering the stored time ambiguous. However, time-zone information have
: been introduced recently by Exif version 2.31 (July 2016). Related tags are:
: "OffsetTime", "OffsetTimeOriginal" and "OffsetTimeDigitized".

** Documentation
*** Case Sensitivity
- Data is stored as entered (case preservative)
- Attribute lists are all lowercased
- Search is always case insensitive

*** Date/Time values
- Uses 24 hour clock, displays using local time zone, stored as UTC
- [[http://www.unicode.org/reports/tr35/tr35-43/tr35-dates.html#Date_Format_Patterns][Date_Format_Patterns]]
