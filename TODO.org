* Tanuki
** TODO Rewrite backend in Dart
*** DONE find a web framework
**** DONE read https://dart.dev/tutorials/server/httpserver
**** DONE read https://dart-lang.github.io/server/
***** all rather out of date
**** DONE ensure support for CORS requests
***** dart example in =httpserver= just injects the headers
***** see =note_server.dart= in https://github.com/dart-lang/dart-tutorials-samples/
**** DONE ensure support for static files
***** use =VirtualDirectory= from =http_server= package
***** see =static_file_server.dart= example of serving =index.html= by default
**** DONE catch-all route that sends everything else to the SPA
**** DONE evaluate https://pub.dev/packages/http_server
***** only API documentation, no examples or guides
***** probably meant to use shelf instead of this directly
***** theoretically can do everything, it's just all manual
**** DONE evaluate https://github.com/dart-lang/shelf
***** inspired by connect, rack, wsgi
***** similar to warp or plug, modular design for composable servers
***** offers logging middleware
****** look at how to integrate with https://pub.dev/packages/logging
***** easy request handling with "handlers"
***** easy composability with "pipelines"
***** static files: https://pub.dev/packages/shelf_static
***** routing: https://pub.dev/packages/shelf_router
**** DONE evaluate https://github.com/stablekernel/aqueduct
***** essentially a one developer project
***** featureful all-in-one framework
***** primarily focused on REST
***** supports automated testing
***** seems a bit big and far more than needed for tanuki
**** DONE evaluate https://pub.dev/packages/angel_framework
***** largely inspired by express.js
***** only one developer, at risk of abandonment
***** many add-on modules for various functionality
***** supports automated testing
***** scaffold generator is broken due to monorepo changes
***** considerably slower than shelf, and more so when native
**** DONE evaluate https://jaguar-dart.com
***** not updated since last July
**** DONE get a basic web server going with shelf
***** DONE serve some requests
***** DONE set up logging (console by default)
***** DONE take the port number from the environment (default 4000)
***** DONE take the host address from environment (default 'localhost')
***** DONE serve the static files
***** DONE serve a static GraphQL response
***** DONE add CORS headers using middleware
***** DONE check that =OPTIONS= method is handled
***** DONE check that correct mimetype is returned for static files
***** DONE map all missing results to =index.html= (i.e. no 404)
***** DONE =GET= on =/graphql= route throws errors now
**** DONE use some load testing tool to ensure core use
***** =ab= is already installed but dated and often freezes
***** =brew install hey= (the ab replacement, works better)
***** =hey -n 10000 http://localhost:<port>/=
****** ~-exe~ is the compiled executable
| service              |   qps |
|----------------------+-------|
| apache               | 15000 |
| tanuki (node)        |  3000 |
| tanuki (shelf)       |  2500 |
| tanuki (shelf-exe)   |  2600 |
| tanuki (angel)       |  1400 |
| tanuki (angel-exe)   |  1010 |
| shelf basic example  |  6300 |
| shelf router example |  6100 |
| zorigami (rust)      |  9400 |
*** old shelf related work
**** shelf: add automated testing of http handlers
***** c.f. https://stackoverflow.com/questions/42824533/unit-testing-with-darts-shelf-rest
**** shelf: integrate =graphql_server= into existing shelf solution
***** c.f. https://graphql.org/learn/serving-over-http/
***** shelf lacks file upload via multi-part posts
****** c.f. https://github.com/dart-lang/shelf/issues/119
****** makes the graphql file upload impossible
**** shelf: consider how to add GraphiQL functionality
*** TODO try using [[https://angel-dart.dev/][angel]] for web
**** DONE serve a canned response to =GET /=
**** DONE continue reading https://docs.angel-dart.dev/v/2.x/guides/getting-started
**** DONE set up request logging
**** DONE get host and port from environment
**** DONE serve static files
**** DONE ensure proper mimetype for static files
**** DONE add route for canned graphql response
**** DONE map fallback route to the =index.html= file
**** DONE respond with CORS headers as needed
**** DONE ensure =OPTIONS= handled for graphql route
**** TODO add testing: https://github.com/angel-dart/angel/tree/master/packages/test
***** fallback response to unrouted request
#+BEGIN_SRC shell
$ curl -D - http://localhost:4040/foobar
HTTP/1.1 200 OK
accept-ranges: bytes
cache-control: public, max-age=0
content-length: 1031
content-type: text/html
etag: 1582075543000
expires: Thu, 27 Feb 2020 04:03:09 GMT
last-modified: Wed, 19 Feb 2020 01:25:43 GMT
#+END_SRC
***** static image request and response
#+BEGIN_SRC shell
$ curl -D - http://localhost:4040/icons/Icon-192.png
HTTP/1.1 200 OK
accept-ranges: bytes
cache-control: public, max-age=0
content-length: 5292
content-type: image/png
etag: 1581826445000
expires: Thu, 27 Feb 2020 03:23:25 GMT
last-modified: Sun, 16 Feb 2020 04:14:05 GMT
#+END_SRC
***** CORS request and response
#+BEGIN_SRC shell
$ curl -H 'Origin: example.com' -D - -X OPTIONS http://localhost:4040/graphql
HTTP/1.1 204 No Content
access-control-allow-origin: *
access-control-allow-methods: GET,HEAD,PUT,PATCH,POST,DELETE
content-length: 0
content-type: text/plain
#+END_SRC
**** DONE remove the unused packages added in commit =378700b=
*** DONE find a graphql server
**** DONE look for support for GraphiQL or Playground
**** DONE evaluate https://pub.dev/packages/graphql_server
**** DONE evaluate https://pub.dev/packages/angel_graphql
*** DONE set up angel graphql server
**** DONE add =cors= into the middleware (for graphql route)
**** DONE see how to write resolvers with angel_/graphql_server
**** DONE find out how to define input objects: use =inputField()= helper
**** DONE see how to do file uploads with =angel_graphql=
***** defined as =GraphQLUploadType= in =angel_graphql= with name =Upload=
**** DONE convert the =schema.graphql= to Dart types
**** DONE define the =BigInt= type and use for filesize
**** DONE write some basic tests for the schema
*** TODO document shelf vs angel
**** shelf
***** faster for both vm and native
***** generally more coding effort
***** lacks file upload (see shelf issue 119)
**** angel
***** has everything (static files, CORS, etc)
***** supports HTTP and GraphQL thoroughly
***** integration of graphql is very easy
*** TODO Early assessment of available packages
**** TODO write quick tests for everything tanuki needs [9/12]
- [X] rocksdb
- [X] detect orientation
- [X] rotate image
- [X] exif
- [ ] jfif
- [ ] tiff
- [X] media type detection
- [X] thumbnails
- [X] web server
- [X] GraphQL client
- [X] GraphQL server
- [ ] ffmpeg metadata access
**** TODO assess Windows support for everything
*** TODO look for code coverage tools
*** TODO Translate database layer to use RocksDB and secondary index
**** TODO define a class for assets
**** TODO use the secondary index wrappers for get and put
**** TODO define a class to be the database index "value"
***** holds location label, media type, filename, best date
**** TODO implement secondary indices
***** TODO by_checksum
***** TODO by_date
***** TODO by_filename
***** TODO by_location
***** TODO by_mimetype
***** TODO by_tag
***** TODO all_locations: using =count_all_keys()=
***** TODO all_tags: using =count_all_keys()=
***** TODO all_years: using =count_all_keys()=
**** TODO write query functions and tests
***** should use =query_exact()= in most cases
***** use the existing GraphQL resolver code as requirements guide
***** TODO write test functions that populate test database
***** TODO write tests for the high-level operations that resolver will need
****** TODO by_checksum
****** TODO all_locations
****** TODO all_tags
****** TODO all_years
****** TODO asset_count
****** TODO query
**** TODO define a location class to save a database upgrade
***** exif data has GPS lat/long and some other metadata
***** have both a label (for existing data) and GPS fields
*** TODO Translate image import code
*** TODO Translate caption parsing code
*** TODO Translate query parsing code
*** TODO Figure out what the GraphQL object field resolvers really do
**** seems like they are not invoked (e.g. resolver for =filename= field of asset is not called)
*** TODO Implement file upload support in backend
*** TODO Remove Rust and Cargo files
*** TODO Plan how database migrations will happen in the future
**** maintain a meta record with version information
**** look at how the Dart serde library can help (e.g. how serde.rs does)
*** TODO Write an export function for the old database
*** TODO Write an import function for the new database
*** TODO Remove JavaScript code from =src= and =test=
*** TODO Remove Node modules related to backend
*** TODO Remove remaining old backend files
**** =public/schema.graphql=
**** =views/=
** TODO Rewrite frontend in Flutter
*** DONE set up a flutter dev environment
*** TODO set up the page routing
**** c.f. https://flutter.dev/docs/development/ui/navigation
**** c.f. https://github.com/londonappbrewery/BMI-Calculator-Flutter-Completed/ for code layout ideas
**** define a navigation rail component to be used in various pages
**** each page will define a scaffold and decide what is shown
**** define a home page to hold the selectors and image gallery
*** TODO introduce redux for tracking application state
**** retrieved GraphQL data (i.e. tags, locations, years)
**** selected locations
**** selected tags
**** selected years
*** TODO could use =initState()= of =State= to perform the initial query of data
*** TODO build out the webui along-side existing code
*** TODO find out how to upload a file
**** https://rodolfohernan20.blogspot.com/2019/12/upload-files-to-server-with-flutter-web.html
**** example code: https://github.com/rjcalifornia/web_upload
*** TODO how to handle file drops
**** drop zone gist: https://gist.github.com/PlugFox/ffe83a91ce50f9c78a5b1d6674e36d1b
**** for now this is not so important, just use file selector a la =web_upload= example
*** TODO how to upload files via graphql
**** via graphql: https://morioh.com/p/8120c733a77c
*** TODO use docker container to build web assets
*** ideas and widget usage
**** Look for the =video_player= web plugin for playing video in webui
**** Look for examples using =Observable= to fetch remote data
**** use =RichText= widget to style the captions (e.g. make tags bold)
**** tags in caption could be "gesture sensitive" (i.e. clickable) to show assets with that tag
**** =ListView.builder= allows building list items on demand
**** =Image= has a loading builder for showing progress of network images
**** use =semanticLabel= on =Image= for accessibility
**** =Wrap= will do what =flex-flow: row wrap;= does in CSS
**** =FutureBuilder= for showing things that load asynchronously
**** use =SliverAppBar= in place of =AppBar=, it will shrink when content is scrolled
***** could be a good way to keep controls above scrolling content
**** use =FadeInImage= to show a placeholder while loading a remote image
**** maybe use =Hero= to animate/transition from image gallery to a single image
***** click on item in a list/grid and it expands to the details page
**** can use =DataTable= to display labeled data (like asset details, metadata)
**** use pointer enter/exit events to start playing a video in place
**** could check for thumbnails in image EXIF data
***** look for =JPEGThumbnail= or =TIFFThumbnail=
*** TODO remove ReasonML related code and Node modules
**** should be nothing JavaScript/Node/Reason left at this point
**** =public/stylesheets=
**** =public/webfonts=
**** =bsconfig.json=
**** =graphql_schema.json=
**** =gulpfile.js=
**** =node_modules=
**** =package.json=
**** =package-lock.json=
**** =src/*.re=
**** =lib/js=
**** =lib/bs=
**** update =.gitignore= and =.dockerignore=
** Backend improvements
*** TODO Get information from video files
**** Dart packages for ffmpeg have limited platform support
**** May be easier to write Dart code to extract the information from the file
***** this would avoid having additional static file dependencies
**** Alternatively, write our own wrapper for ffmpeg (it's just commands)
*** TODO consider how to support multicore with isolates
**** aqueduct does this apparently
**** c.f. https://stablekernel.com/concurrency-in-server-side-dart/
**** logging is handled by a single isolate
**** read about async dart and "zones"
*** TODO Thumbnail size cache population is noticably slow when selecting many assets
** Search Improvements
*** TODO Support advanced queries using Google-style operators
**** c.f. https://support.google.com/websearch/answer/2466433?hl=en
**** move perkeep style query support from mujina to tanuki
**** webui needs an "advanced" tab/link selector on the search page
*** TODO Support searching the caption text
*** TODO Support wildcards in filename, mimetype (others?)
*** TODO Need a query to find image assets whose orientation is incorrect/unknown
** Data Format Support
*** TODO Detect time zone offset in EXIF data
According to Wikipedia the 2.31 version of EXIF will support time-zone
information. Eventually, the application should be able to detect this and
include it in the database records.

: There is no way to record time-zone information along with the time, thus
: rendering the stored time ambiguous. However, time-zone information have
: been introduced recently by Exif version 2.31 (July 2016). Related tags are:
: "OffsetTime", "OffsetTimeOriginal" and "OffsetTimeDigitized".

*** TODO Extract exact location information from images [0/4]
- [ ] Write a data migration to process existing assets
- [ ] Incoming needs to extract this information for new assets
- [ ] Existing location values should be stored in "label" field
- [ ] Exact location information should be stored separate from label

** Long Term items
*** TODO if still using =exif= dart package, must replace it, it is GPL
** Documentation
*** Case Sensitivity
- Data is stored as entered (case preservative)
- Attribute lists are all lowercased
- Search is always case insensitive
*** Date/Time values
- Uses 24 hour clock, displays using local time zone, stored as UTC
- [[http://www.unicode.org/reports/tr35/tr35-43/tr35-dates.html#Date_Format_Patterns][Date_Format_Patterns]]
** Desktop app
*** Showing the licenses/about dialog
**** c.f. "licenses" on https://flutter.dev/docs/resources/faq
** Mobile app
*** Use [[https://pub.dev/packages/image_picker][image_picker]] to allow user to select images from photo library
** Legacy Reason/JavaScript/Rust
*** N.B. bs-platform module version
**** cannot upgrade to 7.0.1 because ReasonApollo fails to compile
*** N.B. react-apollo module version
**** reason-apollo still depends on react-apollo 2.5.8
**** upgrading react-apollo to >3.x breaks reason-apollo
**** must wait until reason-apollo updates their dependencies
*** TODO Rewrite backend in Rust
**** TODO switch out =ulid= for https://crates.io/crates/rusty_ulid
**** TODO Translate database layer to use RocksDB and =mokuroku=
***** DONE define type for assets
***** DONE write a =new_asset_id= function like =makeAssetId=
***** DONE need to decide how to handle the database prefix for (asset) keys
****** straight-forward for now
***** DONE write =database= module functions for operating on =Asset= instances
***** DONE use the =mokuroku= database functions for get and put
***** DONE define a struct to be the database index "value"
****** holds location label, media type, filename, best date
***** DONE use =chrono= for the dates (=SystemTime= is not consistent)
***** DONE implement secondary indices
****** DONE by_checksum
****** DONE by_date
****** DONE by_filename
****** DONE by_location
****** DONE by_mimetype
****** DONE by_tag
****** DONE all_locations: using =count_all_keys()=
****** DONE all_tags: using =count_all_keys()=
****** DONE all_years: using =count_all_keys()=
***** TODO write query functions and tests
****** should use =query_exact()= in most cases
****** use the existing GraphQL resolver code as requirements guide
****** TODO write test functions that populate test database
****** TODO write tests for the high-level operations that resolver will need
******* TODO by_checksum
******* TODO all_locations
******* TODO all_tags
******* TODO all_years
******* TODO asset_count
******* TODO query
***** TODO write a constructor and "builders" for =Asset=
****** would help to know what GraphQL upload resolver looks like in Rust
****** TODO write a test that uploads an asset via GraphQL
***** TODO define a location struct to save a database upgrade
****** exif data has GPS lat/long and some other metadata
****** have both a label (for existing data) and GPS fields
**** TODO Translate image import code (EXIF, HEIF, MPEG, etc)
**** TODO Translate caption parsing code
**** TODO figure out file upload for GraphQL resolvers
**** TODO Translate query parsing code
**** TODO Write data import/export function to save/load from JSON
**** Libraries
***** Facial recognition
****** https://crates.io/crates/opencv (WTFPL)
***** Videos
****** need Rust bindings for =ffprobe= and =ffmpeg=
******* https://crates.io/crates/ffmpeg4 (WTFPL)
******* https://crates.io/crates/ffmpeg-dev (MIT/LGPL)
******* https://crates.io/crates/ffmpeg-next (WTFPL)
****** see if there are alternatives for Rust
***** Images
****** EXIF: https://crates.io/crates/rexif (MIT)
****** HEIF: https://github.com/oussama/libheif-rs (MIT)
****** https://crates.io/crates/libvips (MIT)
****** if all else fails, can use =magick-rust= (needs bindgen updates soon)
**** TODO Remove Node modules no longer used (compare to zorigami)
*** TODO Look at [[https://www.material.io][Material Design]] for icons and such
**** icons: https://www.material.io/resources/icons/
**** many design elements for various purposes
**** they provide free icons that are well thought out
*** Front-end improvements
**** TODO Debounce the data validation fields using async validators
**** TODO Consider how to make thumbnail page responsive
***** Show 1, 2, 3, or more depending on browser width
***** Should be able to leverage CSS for this
**** TODO Asset preview page shows a broken link, should show placeholder image
**** TODO Add error boundary handling (requires React API changes)
***** waiting on support for =didCatch= in React Hooks API
***** also likely need the API exposed via ReasonReact
***** see the =ErrorBoundary= module definition in =Index.re=
**** TODO Use a lightbox component for displaying assets
***** c.f. https://creativebulma.net/product/lightbox/demo
*** Bugs
**** TODO Sometimes the front-end misses updates from backend?
***** e.g. click a tag, images fail to appear; click and click again, works
***** find out what is going on when this happens
**** TODO Home page fails to update after data changs
***** TODO Home page stays stuck on "upload" even after images are uploaded
****** name the =CountAssets= query and add to the =refetchQueries= list
***** TODO After editing asset, selections need to elide newly removed tags
****** that is, found "opa)", selected assets, fixed them, now cannot clear selection
****** need to attach an update function after the edit asset mutation completes
****** c.f. =onCompleted= prop on =mutation= function
******* https://www.apollographql.com/docs/react/essentials/mutations/
****** can also set =awaitRefetchQueries= to wait for refetch to complete
****** could move Locations/Tags/Years logic into =Home= and handle everything there
****** could use GraphQL subscriptions in =Home= to keep track of changes
*** Development Support
**** TODO Figure out how to deal with the GraphQL schema weirdness
***** The introspection tool generates weird types for the non-optional array of strings
***** Maybe that tool is correct and my types are wrong?
***** Or maybe that tool has an update that fixes this?
***** c.f. commit =b8fa735=
*** TODO consider using [[https://github.com/vertexclique/bastion][bastion]] for fault-tolerance (i.e. supervisor)
**** it appears to support Erlang-style supervisor behavior
**** actix has similar functionality and is easier to read/write
