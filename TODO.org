* Action Items
** Help
*** write help pages for each of the main pages
**** pending page
- query always looks for assets without tags, caption, and location label (all 3 are missing)
**** details page
- replacing the asset with the exact same file content will have no effect, even if a different file name
- replacing an asset will change the asset identifier, media type, file name, etc
- n.b. QuickTime Player can export an AVI as MOV; be sure to rename the file to .mp4 for Chrome
- n.b. when converting videos, make sure quality and frame rate are as good as the original
**** edit page
***** Advanced queries textual operators and operands
****** operations can be grouped with parentheses
****** supported operations of the form =predicate:value=
| name   | example             | description                  |
|--------+---------------------+------------------------------|
| is     | is:image            | match on the media ~type~    |
| format | format:jpeg         | match on the media ~subtype~ |
| tag    | tag:cats            | match on a tag               |
| loc    | loc:paris           | match on any location field  |
| before | before:2017-05-13   | match before a given date    |
| after  | after:2017-05-13    | match after a given date     |
| -      | -format:jpeg        | inverse of next operation    |
| or     | tag:cat or tag:dog  | boolean or operator          |
| and    | tag:cat and tag:dog | boolean and operator         |
****** predicate values can be enclosed in single or double quotes
****** character escapes within quoted strings will be evaluated
****** dates are RFC 3339 formatted (https://datatracker.ietf.org/doc/html/rfc3339)
** Pending
*** display modes: have an option that makes the images really big (single column, huge images)
*** hovering over asset should show larger version in a large tooltip
*** make =fa-angle-down= icon in =card-header= actually do something
*** add item to ~dropdown~ menu to show the asset in full size in a modal
*** add item to ~dropdown~ menu to navigate to asset view
** Browse
*** make the selectors row sticky when scrolling
**** allow =nav= element to scroll away
**** container with selectors and container with tags should be sticky
**** this is difficult because Bulma assumes =is-fixed-top= is for a =nav= at the top
**** trying to squeeze everything into =nav= forces all of the elements onto one row
*** when multiple attributes are selected, add a ~clear all~ button/tag
*** filter years in ~Year~ selector when there are results available
**** that is, find all possible years available among the results, only show those
*** hovering over asset should fetch and display details in a large tooltip
*** add date order button on gallery (ascending/descending)
*** display modes
**** grid of 300x300 images with caption info (date, location/filename) (a la PhotoPrism)
**** wide blocks with thumbnails on left, more details on right (c.f. anilist.co)
**** responsive grid; images only, scaled to fit in a row and fill horizontally (i.e. ~mujina~)
**** grid of just images, maybe 180x180; images cropped to the square (a la Apple Photos)
**** list of rows, tiny thumbnail (96x96), caption, location, date
*** paging
**** spring-loaded next-page navigation
***** scroll to the bottom and keep trying to scroll
***** show some indication (e.g. a spinner) that holding will fetch the next page
***** after two seconds or so, navigate to the next page
**** consider other ways of showing lots of results w/o paging
***** look at some examples and packages for ideas on design and implementation
****** handles scrolling and waiting for data: https://pub.dev/packages/pagination_view
****** has dots: https://pub.dev/packages/dot_pagination_swiper
****** can show an error message: https://pub.dev/packages/flutter_pagination_helper
****** infinite with limited caching: https://pub.dev/packages/infinite_pagination
****** supports various views: https://pub.dev/packages/flutter_paginator
**** consider how to display pages continuously (a la infinite list)
***** would keep several pages in the widget tree at one time
***** scrolling would drop a page widget from the tree, and add a new one
***** when fetching a new page, the page widget would show a progress indicator
***** the "dropped" pages would be changed to consist of placeholders to free memory
**** using carousel style navigation arrows?
*** navigation rail for filtering assets
**** Nextcloud has a side bar for photos with these options:
***** Photos
***** Videos
***** Albums
***** People
***** Favorites
***** On this day
***** Tags
***** Locations
*** calendar view for browsing by months
**** PhotoPrism has a ~calendar~ view that shows months of years in descending order with a random thumbnail
**** clicking on the month opens an "album" of everything in that month
** Details
*** Replacing a video seems to reset the ~best~ date to today
*** Lightbox style asset browsing
**** show full-size image at 100% width of browser window
**** show chevron arrows on left and right to navigate among search results
**** controls appear when mouse moves over asset display, then fade away
*** completion for tags (like bulk edit form)
*** completion for location fields (like bulk edit form)
*** add ~copy~ button next to asset path
*** Read timezone info from Exif tags when displaying asset details
**** everything is assuming that the date/time is UTC, which is almost always wrong
**** Exif field is named =OffsetTimeOriginal= in ~primary~
**** frontend should use ~timezone~ value (if available) to show correct time in asset details
*** Format byte size using locale-specific number formatting
*** Show tiny map of where photo was taken
**** [[https://cloud.google.com/maps-platform/][Google Maps]]
- customer uses their own API key, sets in preferences
- for =testing= account: =AIzaSyAI73udKC3KVk6aIBqOjSqSv6PEQ0qd638=
**** [[https://mariusandra.github.io/pigeon-maps/][Pigeon Maps]]
- Uses data from OpenStreetMap, Wikimedia for the tiles
*** Find out if =mp4= crate can read GPS coords from videos
**** Preview.app will display location information for videos
*** Show additional file metadata (TIFF, EXIF, JFIF, IPTC)
** Uploads
*** theoretically could show the thumbnail of images before uploading
**** c.f. https://developer.mozilla.org/en-US/docs/Web/API/File_API/Using_files_from_web_applications
** Edit
*** hover over asset thumbnail will show larger version as tooltip
*** allow adding or subtracting a number of days
*** add option to set the caption
*** add date order button on gallery (ascending/descending)
** Search
*** add date order button on gallery (ascending/descending)
** Navbar
*** light/dark mode: goes light during page load; chrome does not send color-scheme header
** Hosting externally
*** consider storage costs (currently under 100 GB)
*** place basic auth server in front (Azure app gateway maybe?)
*** consider if deploying in read-only mode (sync would be tricky)
** Dependencies
*** latest =mp4= crate has an error with certain test fixture
**** version =0.13= does not have the problem, but =0.14= does
**** seems to not like something about the =100_1206.MOV= file
#+begin_src
actual: Err(mp4a box contains a box with a larger size than it)
thread 'domain::usecases::tests::test_get_original_date' panicked at src/domain/usecases/mod.rs:339:9:
assertion failed: actual.is_ok()
#+end_src
** Attribute management
*** screen for showing all tags, locations, years, with count values
**** selecting a tag or location offers a rename function
**** selecting multiple tags/locations offers option to remove from all assets
** Manage revisions of assets
*** when uploading a replacement file for an asset, keep the old file
*** add the old identifier to a new property in the asset record
*** =Asset= will have a new optional =Vec<String>= of the old identifiers
*** graphql: query for asset gives previous identifiers
*** graphql: mutation to swap an old identifier with the current one
*** graphql: mutation to remove all old identifiers and files
*** webui: buttons for viewing other revisions, setting current, purging old ones
** Deleting assets
*** create graphql mutation to delete assets with certain tag
**** boolean argument ~yes~ to actually perform the delete
**** if ~yes~ argument is false, reports what would be deleted
** Schema Growth
*** Add new database records with different key prefixes
**** =metadata/= for user-provided name/value pairs
**** =location/= for location details (GPS, etc)
**** =decoration/= for ML added values (labels, keywords)
** Data Format Support
*** Read =ID3= tags in audio files
*** Detect time zone offset in EXIF data
According to Wikipedia the 2.31 version of EXIF will support time-zone
information. Eventually, the application should be able to detect this and
include it in the database records.

: There is no way to record time-zone information along with the time, thus
: rendering the stored time ambiguous. However, time-zone information have
: been introduced recently by Exif version 2.31 (July 2016). Related tags are:
: "OffsetTime", "OffsetTimeOriginal" and "OffsetTimeDigitized".

*** Support more video formats
**** OGG (=.ogg=), find out what it is and how to play it
*** Support PDF files
**** Display thumbnail of first page
**** Display available metadata
*** Render Markdown as HTML in a scrollable view
*** Display anything textual in a scrollable text area
*** HEIC/HEIF images
**** HEIF is an image file format employing HEVC (h.265) image coding
**** [[https://aomediacodec.github.io/av1-avif/][AV1]] is the free alternative to encumbered HEVC
**** image crate supports AVIF but cannot read HEIC files because they lack AVIF "branding"
***** unclear where the error is coming from, but ultimately cannot read HEIC files at all
** Machine learning
*** facial recognition
**** evaluate how other tools make this easier
***** do they simply show the faces and have the user enter names?
*** https://cetra3.github.io/blog/face-detection-with-tensorflow-rust/
*** TensorFlow Hub: https://tfhub.dev
*** https://developers.google.com/machine-learning/crash-course/
*** PhotoPrism applies a bunch of keywords to assets, but only one "label"
**** e.g. a "Sheep" label with keywords "animal, grass, grasslands, green"
*** ML to identify objects, people, etc in photos
**** ML recognizes the subject (dog, cat, person, etc)
**** PhotoPrism supports "automated tagging based on Google TensorFlow"
**** could use OpenCV for face recognition
*** ML to rank photos on various qualities
**** c.f. https://simonwillison.net/2020/May/21/dogsheep-photos/
**** ML assigns scores on aesthetics, interest, etc
** Asset organization
*** Events
**** e.g. school performances, vacations
**** Means of assigning assets to a particular event
**** Browsing by events
*** Albums
**** i.e. organize assets by project, subject, event
**** Apple Photos has ~smart~ albums
***** assets taken around the same time, place
**** save search results as a new album
*** Groups and subgroups of assets
**** Turkey > Gallipoli Peninsula > Gali Winery
**** Winery > vinification > fermentation tanks
**** Architecture > Buildings > underground cellar
*** Multiple libraries (like Apple Photos)
** Data Integrity
*** Add a GraphQL mutation that will delete and rebuild all indices
*** Guard against concurrent modifications
**** consider how to manage multiple users making changes
**** e.g. two people trying to update the same set of recent imports
**** e.g. two people trying to edit the same asset
**** this is known as the ~lost update~ problem
**** usually managed with a revision number on the record
***** updates must include the revision number; if mismatch, raise error
***** HTTP uses the =ETag= value and the =If-Match= header for this purpose
**** maybe keep an edit history or revision number in separate records
*** Expose data integrity checks in frontend
**** consider if using GraphQL subscriptions would make sense
***** would return each asset id and success bool or list of error codes
***** results would be returned one at a time for the frontend to show progress
***** the error codes would be encoded as GraphQL enums
**** add an option to purge bad records
***** errors of type base64, utf8, missing are not recoverable
**** find files for which there are no documents
*** Should have automated backups of the database
**** every M operations or T minutes/hours/days
**** retain N copies of the backup
**** use EXAF similar to how zorigami does its database backup
** Bulk Export
*** Easy selection and export of multiple images
** Architecture Review
*** Consider if SQLite would be a suitable database
*** Use async throughout, avoid the =block_on()= function
**** Both =juniper= and =[leptos::server]= are or support async fns
**** Thereforce, all use cases can also be async, and the repos, and so on
*** Large file upload
**** split file into chunks, upload one-by-one, showing progress
***** default to 8MB chunks, most images will be smaller than that
***** partly this avoids any limitations actix has, but also reverse proxies like nginx
*** GraphQL server
**** consider https://github.com/async-graphql/async-graphql as alternative to juniper
***** handles multipart requests (file uploads)
***** provides actix-web integration
** Scripting support
*** Enable task automation, like =imagemagick= (rotate, resize, etc)
*** potential scripting languages
**** Passerine (https://github.com/vrtbl/passerine) seems dead
**** vonuvoli-scheme (https://github.com/volution/vonuvoli-scheme)
**** mlua (https://github.com/mlua-rs/mlua) wraps Lua in Rust, supports all versions
**** hlua (https://github.com/tomaka/hlua) wraps Lua in Rust
** Easy publishing to sharing sites (e.g. Google Photos)
*** option to auto-orient
*** option to resize image
*** option to change format
*** option to strip metadata
*** option to apply watermarks
*** option to save in ePub format for iOS
*** button to open asset in file browser
** Easy import from external sites (e.g. google, instagram)
** Multi-user support
*** login page
**** desktop app could use keychain to get access
*** password reset (via email?)
*** access restrictions
*** private sets
*** comments
*** favorites
*** likes
*** rating levels (e.g. mature)
* Documentation
** Uploads directory
*** asset importer ignores hidden files and directories
** Case Sensitivity
- Data is stored as entered (case preservative)
- Attribute lists are all lowercased
- Search is always case insensitive
** Date/Time values
- Everything is treated as UTC
- EXIF data may contain timezone data depending on version
- [[http://www.unicode.org/reports/tr35/tr35-43/tr35-dates.html#Date_Format_Patterns][Date_Format_Patterns]]
* Resources
** File formats
*** Exif
**** c.f. https://www.cipa.jp/
** Location
*** c.f. https://github.com/google/open-location-code/wiki/Evaluation-of-Location-Encoding-Systems
*** c.f. https://www.osgeo.org for some information, resources
*** reverse geocoding services
**** Google requires using their maps and giving attribution(?)
**** Google and Azure can be quite expensive
**** many services have very low requests per second (~5)
**** HERE seems to be pretty good as of Feb 2024
**** list of providers found so far
- https://radar.com
- https://www.here.com/get-started/pricing
- https://developers.google.com/maps/documentation/geocoding/overview
- https://www.geoapify.com/reverse-geocoding-api
- https://docs.mapbox.com/api/search/geocoding/
- https://developer.apple.com/documentation/applemapsserverapi/reverse_geocode_a_location
- https://www.maptiler.com/cloud/geocoding/
- https://docs.aws.amazon.com/location/latest/developerguide/search-place-index-reverse-geocode.html
- https://learn.microsoft.com/en-us/rest/api/maps/search/get-search-address-reverse
