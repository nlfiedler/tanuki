* Tanuki
** [#A] Get existing assets into tanuki
*** DONE limiting to 100 assets on recents page is not working, shows all
*** DONE disable the file open button on upload page during upload
*** DONE extract creation data from video files (mp4)
**** https://github.com/alfg/mp4rs (MIT)
***** creation time is in =moov.mvhd.creation_time=
***** results of testing with various video files
| filename     | mp4 creation time | minus 1904 | minus formatted     | ffprobe             |
|--------------+-------------------+------------+---------------------+---------------------|
| 100_1206.MOV |        3272616440 | 1189771640 | 2007-09-14 05:07:20 | 2007-09-14 12:07:20 |
| IMG_3094.MOV |        3463750916 | 1380906116 | 2013-10-04 10:01:56 | 2013-10-04 17:01:56 |
| flower.mpg   |        3603280881 | 1520436081 | 2018-03-07 07:21:21 | 2018-03-07 15:21:21 |
**** https://github.com/mozilla/mp4parse-rust (MPL-2.0)
***** intentionally skips the creation time fields
*** DONE large file import (or simply direct file import)
**** photoprism has an ~import~ folder and command to bring in assets
**** on upload screen, provide button to process anything sitting in ~uploads~ directory
**** guess the media type, create a record, move file into place
**** DONE write a new usecase that invokes =ImportAsset=
***** test that it ignores dot files and directories
**** DONE write a new GraphQL mutation that invokes the new usecase
***** return the number of assets processed
**** DONE add the button on upload screen to invoke GraphQL mutation
***** display the results (number of assets)
*** DONE imports screen should first sort results by filename
*** DONE need to make sure the other AVI files in shared are really AVI files
**** rename the files before importing
**** they all check out as proper RIFF encoded AVI files
*** DONE extension repair should replace the extension, not append
*** DONE some of the supposed avi files are QuickTime
**** probably need to fix the media type by hand and then run a repair
**** they are probably the ones that got "fixed" a week ago
***** their names were probably wrong but the media type was correct?
**** these are all quicktime videos with non-trivial length
***** does play in Finder
***** does download via link
***** does not play in Firefox
***** does not play in Safari
***** changing the media type fixes it for Safari
**** these have been fixed, however they are very short
***** does not load properly in Firefox
***** displays normally in Safari, shows as 0 seconds long
#+BEGIN_SRC
MjAxNC8xMi8yMS8wMDE1LzAxY2UxcWQ3cWVwMndiMWY4OWduNW1kNHpqLmF2aS5tb3Y=
#+END_SRC
**** only these two are actual RIFF AVI files
#+BEGIN_SRC
MjAyMC8wNS8yMC8yMzQ1LzAxZTh0OGUzMDU4ajZlcXg1MDIwZmZtemN0LmF2aQ==
MjAyMC8wNS8zMC8yMTMwLzAxZTlrcjFrZjJqcTlteHY3eGR5eGV5MTJnLmF2aQ==
#+END_SRC
*** TODO some videos have trouble playing in Firefox but are okay in Safari
**** maybe something to do with the bytes range request?
**** maybe =main.rs= should convert =video/quicktime= to =video/mp4=
***** that made no difference
**** Firefox says this video is not supported
***** it has a reasonable date
***** it has =.mov= extension in the original filename
***** it is very large (573mb)
#+BEGIN_SRC
MjAyMC8wNS8zMC8yMjE1LzAxZTlrdjNoZXI2NjQ2bng3cmVlbjVqcHd6Lm1vdg==
#+END_SRC
**** Firefox will play with sound only
***** they all have =.avi= extension in the original filename
***** they all have weird dates (=12/31/1969, 4:00:00 PM=)
#+BEGIN_SRC
MjAxNS8wNC8xNC8wMzE1LzAxY2UxcWQ3YjIxMHpmOGRrN3RhdjU3Zzh3Lm1vdg==
MjAxNS8wMi8wMi8wMjE1LzAxY2UxcWQ4d2gxM3NoYmJyZmo4bWM2czZrLm1vdg==
MjAxNS8wNC8xNC8wMzE1LzAxY2UxcWQ3c3BhODBid2I1cnk5NGZtcXZrLm1vdg==
MjAxNS8wNC8xNC8wMzE1LzAxY2UxcWQ4Y2txOWhuYWdqYjN0dDgzN3hlLm1vdg==
MjAxNS8wNC8xNC8wMzE1LzAxY2UxcWQ4Z3d6M2UzbnQ0am02cjgyYWN0Lm1vdg==
MjAxNS8wNC8xNC8wMzE1LzAxY2UxcWQ4bTlrZzV0Y2pkMzA0OHhrMmdrLm1vdg==
MjAxNS8wNC8xNC8wMzE1LzAxY2UxcWQ5YnM2MHJoaDAzbjdrZDBoOGt5Lm1vdg==
MjAxNS8wNC8xNC8wMzE1LzAxY2UxcWQ5Z2hjeTZwdmdjanQ3aGthYzZzLm1vdg==
MjAxNS8wNC8xNC8wMzE1LzAxY2UxcWQ5azNxZTA0eGdubmJ4N3poOWtlLm1vdg==
MjAxNS8wNC8xNC8wMzE1LzAxY2UxcWRhZGYweWVoOXA0czdnMjdtNnF0Lm1vdg==
MjAxNS8wNC8xNC8wNDE1LzAxY2UxcWQ4enNweWF3Ymd6a2hqYjY5M2prLm1vdg==
MjAxNy8wMy8wMi8wNjMwLzAxY2UxcWQ5MmR3emJiYWd5NTJ0c2FwcjY3Lm1vdg==
MjAxNy8wMy8wMi8wNjMwLzAxY2UxcWQ5NXg1czJwczNhZnkxY3NwMThtLm1vdg==
#+END_SRC
*** DONE extract original date from avi files
**** evaluate https://crates.io/crates/riff to see if it decodes metadata
**** c.f. https://en.wikipedia.org/wiki/Resource_Interchange_File_Format
**** c.f. https://www.eden-foundation.org/products/code/film_date_stamp/index.html
**** date may be a string (in =IDIT= chunk?): =SAT DEC 19 05:46:12 2009= with newline and null
**** date may also be encoded as =DTIM= (see wikipedia RIFF article on how to convert)
*** DONE select on media type just like location, year, tags
**** would be nice to get all unique media types (like locations and tags)
*** TODO shared folder cleanup
**** dump everything into the =uploads= directory and process anything new
*** DONE ensure assets are readable by all (=chmod 644=) on import
** [#C] Prepare for Christmas calendar
*** easy selection and export of images
**** Selection process
***** Maybe show selection icon thingy on hover, click to select
***** Maybe shift-click to select by thumbnails
**** Export process
***** Maybe main menu has "export" feature to export selected assets
***** Maybe action panel appears when there are selections
***** Show "file save" dialog to choose local file path
***** Save assets using their unique filename
** [#B] New Interface
*** Use Clean Architecture
**** define the features
***** browse
***** search
***** import
***** export
***** edit
*** Thumbnail Serving Strategy
**** capture the image/video dimensions during import, save to asset record
***** a larger asset record in CBOR format is ~260 bytes, a few more bytes is okay
***** in PouchDB, each record takes almost exactly 1 kilobyte
***** use =u32= for each dimension (should be more than enough)
**** on import, ensure asset identifier ends with correct media type extension
***** if provided filename does not end in the correct extension, append it
****** use the provided media type to know what extension to add
***** this ensures correct guessing of media type when making thumbnails
***** n.b. all thumbnails and previews are image/jpeg anyway so this is not necessary
***** if, someday, the provided media type is "unknown", then use mime sniffer
***** c.f. https://mimesniff.spec.whatwg.org
***** c.f. https://developer.mozilla.org/en-US/docs/Mozilla/How_Mozilla_determines_MIME_Types
***** c.f. https://github.com/flier/rust-mime-sniffer
**** the frontend can use the image dimensions to compute the aspect ratio
**** with the aspect ratio, frontend can request images of the desired size
**** frontend can ask for images that are N pixels high or M pixels wide, or whatever
***** by leaving one dimension maxed out, the image aspect ratio will be maintained
**** as long as client keeps asking for the same basic size, backend can cache them
**** when generating thumbnail, always use jpeg format so content type is =image/jpeg=
*** TODO Replace Reason-React
**** DONE create the flutter (web) files
**** TODO set up the IoC container
**** DONE set up environment config
**** TODO use case: count assets
**** TODO use case: fetch years
**** TODO use case: fetch locations
**** TODO use case: fetch tags
**** TODO use case: fetch asset details
**** TODO use case: query assets using various attributes
***** this will search the combined browse/search page
**** TODO use case: query recent imports
**** TODO define graphql client
**** TODO develop home page like "crane" flutter gallery app
**** TODO develop page for uploading/importing assets
***** https://rodolfohernan20.blogspot.com/2019/12/upload-files-to-server-with-flutter-web.html
***** example code: https://github.com/rjcalifornia/web_upload
***** drop zone gist: https://gist.github.com/PlugFox/ffe83a91ce50f9c78a5b1d6674e36d1b
***** for now this is not so important, just use file selector a la =web_upload= example
**** TODO permit dragging and dropping assets to import
**** TODO develop page for processing recent imports
**** TODO develop page for editing assets details
*** TODO change docker to build flutter web assets
*** TODO remove ReasonML and Node files
**** should be nothing JavaScript/Node/Reason left at this point
**** =bsconfig.json=
**** =graphql_schema.json=
**** =gulpfile.js=
**** =node_modules=
**** =package.json=
**** =package-lock.json=
**** =public=
**** =src/*.re=
**** =lib/js=
**** =lib/bs=
**** update =.gitignore= and =.dockerignore=
*** TODO Improve User Experience
**** browse and search
***** unify the two pages into one
***** with the "crane" like selectors, the search is just another row of inputs
***** that is, normally the second row is collapsed, but clicking a button expands it
***** the second row would have the date range, file name, and media type
**** quick import
***** drag/drop and/or file open to add lots of assets
***** immediately import everything to the backend
***** show progress and display thumbnails as assets are successfully imported
***** switch to the "recent imports" screen showing just these new assets
***** user selects multiple assets and applies tags and locations to them
***** click on an asset to enter a caption in place (without leaving the gallery view)
***** hover over an asset to show a larger version
****** for image, expand temporarily in place
****** for video, start playing it
**** image gallery selectors
***** instead of showing all of the tags, years, locations at once
****** see the "crane" flutter gallery sample for the basic layout and appearance
****** use input fields with small icons on the left and drop-down button on the right
****** typing into the field will perform completion for tags, locations, years
****** clicking on the drop-down will offer selection of attributes
****** once entered or selected, input fields show active selectors
****** maybe have a small x to deactive active selectors
****** can also remove selectors by backspacing
**** image gallery display
***** show selectors for months of the year to jump to that time range
****** eventually this selector needs to consider the sort field and order
***** show additional details on mouse hover
***** button in corner of thumbnail to select assets to edit, download, etc
***** toggle view display
****** grid of just images, maybe 180x180
****** grid of images with caption info (300x300, shows title, location, date)
****** list of rows, tiny thumbnail (96x96), title, location, date, likes
**** asset detail page
***** seems popular to show the gallery items as small thumbnails along the top (horizontally scrollable)
***** have chevron buttons on both sides to navigate through gallery items (e.g. "lightbox")
***** display location as a city/country pair
***** display select information from EXIF metadata (e.g. camera)
**** timeline style display for all assets
***** without any selectors, just show most recent going back in time
*** ideas and widget usage
**** Look at the Flutter "Gallery" app ("crane") for a pretty example
***** gently rounded image corners
***** gallery background has rounded corners
***** pleasing captions
***** interesting not-quite-grid (column oriented) arrangement
***** selectors across the top
***** floating ~Back~ button at the bottom left
**** Consider how to have a "light" and "dark" mode
**** Look for the =video_player= web plugin for playing video in webui
**** use =RichText= widget to style the captions (e.g. make tags bold)
**** tags in caption could be "gesture sensitive" (i.e. clickable) to show assets with that tag
**** paging list view with fetching logic: https://pub.dev/packages/uic
**** =ListView.builder= allows building list items on demand
***** c.f. https://medium.com/flutter-community/flutter-infinite-list-tutorial-with-flutter-bloc-2fc7a272ec67
**** =Image= has a loading builder for showing progress of network images
**** use =semanticLabel= on =Image= for accessibility
**** =Wrap= will do what =flex-flow: row wrap;= does in CSS
**** alternative to row wrapping would be columns of images
***** need to make the number of columns responsive to window width
**** =FutureBuilder= for showing things that load asynchronously
**** use =SliverAppBar= in place of =AppBar=, it will shrink when content is scrolled
***** could be a good way to keep controls above scrolling content
**** use =FadeInImage= to show a placeholder while loading a remote image
**** maybe use =Hero= to animate/transition from image gallery to a single image
***** click on item in a list/grid and it expands to the details page
**** can use =DataTable= to display labeled data (like asset details, metadata)
**** use pointer enter/exit events to start playing a video in place
** Minor Fixups
*** some of the crate dependencies can be in =dev-dependencies=
**** mockall
** Bulk edit
*** need to set the custom date on many assets at once
*** Short term solution akin to perkeep web interface
**** hover over thumbnail, shows checkbox button in the corner
**** click on the checkbox to select the asset
**** once selected, the actions panel slides in from the side
**** image gallery shrinks to fit the actions panel
- [ ] Easy selection with hover checkbox button
  - Could use =svg= tag to render the button
  - See pexels.com in that it uses article tag, with nested img and button with nested svg
- [ ] When selections, filters panel changes to show available actions
- [ ] Actions include adding, deleting tags, setting location
  - This is basically a simplified bulk edit
- [ ] Use a prefix for the checksum values
*** Design bulk edit solution, probably similar to JIRA
- [ ] Access the bulk edit screen via a menu item
- [ ] Use search form
- [ ] Perform search, present results using "list" view
- [ ] Check off results as desired
- [ ] Next page presents several operations
  - [ ] add location
  - [ ] remove location
  - [ ] rename location
  - [ ] add a tag
  - [ ] remove a tag
  - [ ] rename a tag
  - [ ] set caption
  - [ ] change media type
** Asynchronous
*** Will need to start using =async/await= as more libraries return =Future=
*** Use of actix means that tokio runtime is already in place
** Search Improvements
*** TODO Begin search when user pauses typing
**** Use =debounceTime= operator in RxDart with BLoC state for this
*** TODO Support advanced queries using Google-style operators
**** c.f. https://support.google.com/websearch/answer/2466433?hl=en
**** move perkeep style query support from mujina to tanuki
**** webui needs an "advanced" tab/link selector on the search page
**** =is:image= and similar to filter by media type
**** =with:<name>= to filter by people (need to know the people though)
**** =AND= and =OR= operators and grouping with parentheses
*** TODO Support searching for assets that have no tags at all
*** TODO Support searching for assets that have no location at all
*** TODO Support searching for assets that have no caption at all
*** TODO Support searching the caption text
**** likely would involve a full table scan
*** TODO Support wildcards in filename, mimetype (others?)
**** likely would involve a full table scan
*** TODO searching for images by dimensions (~pano~, ~landscape~, ~portrait~)
*** TODO searching assets by metadata values (=meta:exif:field=value=)
*** TODO search for images similar to a selected image (a la geeqie)
*** TODO search for images taken with certain cameras
** Schema Growth
*** ML will introduce new fields, like ~labels~ and ~keywords~
*** Geolocation will introduce new data, like GPS coordinates
*** Customer user-provided metadata will need a place to live
*** Perhaps use records with different key prefixes
**** =metadata/= for user-provided name/value pairs
**** =location/= for location details
**** =decoration/= for ML added values
*** Design solution to database migrations
**** start planning on how to handle data(base) migrations
**** may be a good idea to introduce "metadata" records for assets
***** use a =metadata/= prefix with the id of the asset
***** can hold all sorts of additional information without cluttering the asset
***** should be some form of dictionary to keep things flexible
**** maintain an uber record for tracking database version
**** also the serde library is quite flexible with adding/removing fields
** Data Format Support
*** Read and display descriptions from asset metadata (IPTC ~Description~)
*** Auto-populate missing fields on load
**** when loading an asset, detect missing data (e.g. no original time)
**** try reading the data from the asset and save to the asset record
**** in the future, as more data formats are supported, can fill in the blanks
*** Read other metadata formats
**** XMP
**** IPTC
*** TODO support HEIF images
**** c.f. https://aomediacodec.github.io/av1-avif/
***** AV1 is the free alternative to encumbered HEVC
***** there are some crates for avif
**** HEIF is an image file format employing HEVC (h.265) image coding
**** https://crates.io/crates/libvips (MIT) reads/writes HEIF
***** this library easily crashes with a segmentation fault
**** https://github.com/oussama/libheif-rs (MIT)
**** https://crates.io/crates/kamadak-exif (BSD) reads metadata
*** Support audio formats
**** get audio playback working
**** read =ID3= tags in audio files
*** TODO Detect time zone offset in EXIF data
According to Wikipedia the 2.31 version of EXIF will support time-zone
information. Eventually, the application should be able to detect this and
include it in the database records.

: There is no way to record time-zone information along with the time, thus
: rendering the stored time ambiguous. However, time-zone information have
: been introduced recently by Exif version 2.31 (July 2016). Related tags are:
: "OffsetTime", "OffsetTimeOriginal" and "OffsetTimeDigitized".

*** TODO Display thumbnails for PDF files
*** TODO Read metadata from PDF files
**** probably has a creation date or some sort
*** TODO Show the =AAE= files as plain text (they are xml)
*** TODO Detect if an image is a "portrait" using metadata
*** TODO Display asset metadata when showing asset details
**** e.g. TIFF, EXIF, JFIF, IPTC
*** TODO Render Markdown as HTML in a scrollable view
*** TODO Display anything textual in a scrollable text area
*** Thumbnails for non-images
**** PhotoPrism generates suitable thumbnails for other kinds of files, saves them to disk
*** Reference
**** EXIF: https://www.media.mit.edu/pia/Research/deepview/exif.html
** Geolocation
*** Extract location information from images
**** write a data migration to process existing assets
**** existing location values should be stored in a "label" field
**** exact location information would be stored separate from label
**** c.f. https://github.com/google/open-location-code/wiki/Evaluation-of-Location-Encoding-Systems
**** c.f. https://www.osgeo.org for some information, resources
*** Map display with locations of photos taken
**** [[https://cloud.google.com/maps-platform/][Google Maps]]
- customer uses their own API key, sets in preferences
- for =testing= account: =AIzaSyAI73udKC3KVk6aIBqOjSqSv6PEQ0qd638=
**** [[https://mariusandra.github.io/pigeon-maps/][Pigeon Maps]]
- Uses data from OpenStreetMap, Wikimedia for the tiles
** Machine learning
*** TensorFlow Hub: https://tfhub.dev
*** https://developers.google.com/machine-learning/crash-course/
*** PhotoPrism applies a bunch of keywords to assets, but only one "label"
**** e.g. a "Sheep" label with keywords "animal, grass, grasslands, green"
*** ML to identify objects, people, etc in photos
**** ML recognizes the subject (dog, cat, person, etc)
**** PhotoPrism supports "automated tagging based on Google TensorFlow"
**** OpenCV for face recognition
***** consider licensing commercial library for this
*** ML to rank photos on various qualities
**** c.f. https://simonwillison.net/2020/May/21/dogsheep-photos/
**** ML assigns scores on aesthetics, interest, etc
** Asset organization
*** Albums
**** i.e. organize assets by project, subject, event
**** Apple Photos has ~smart~ albums
***** assets taken around the same time, place
**** save search results as a new album
*** Personal collections
**** that is, sets of assets normally visible to just one person
*** Multiple libraries (like Apple Photos)
** Mobile web support
*** Progressive Web App support in Flutter is coming as of 2020/04
*** Use PWA to get app-like behavior on mobile devices
*** Look for package (like image_picker) that enables user to select photos to upload
** Desktop app
*** Need setup for configuration system
**** properties
***** path for database files
***** path for where file uploads go temporarily
***** path for where assets are stored
**** default configuration setup at build-time
***** would be nice to have something like Dart's =environment_config=
****** could use =build.rs= to generate an environment config
******* then load that in =main.rs= to get everything into memory
***** https://github.com/andoriyu/uclicious (BSD)
***** https://github.com/mehcode/config-rs (MIT)
**** screen for configuring the settings
*** Showing the licenses/about dialog
**** use the Flutter =AboutDialog= widget
**** c.f. "licenses" on https://flutter.dev/docs/resources/faq for details
** Mobile app
*** Will likely need the Flutter =AboutDialog= to show legalese for app stores
*** Use [[https://pub.dev/packages/image_picker][image_picker]] to allow user to select images from photo library
*** Upload while away from home
**** mobile app with upload to a "drop box", backend then retrieves those (on a schedule?)
**** evaluate [[https://github.com/warner/magic-wormhole][magic-wormhole]] as a means of transferring directly to the home computer
** Editing Images
*** Keep track of the asset revisions
*** Allow user to select the primary version (e.g. undo)
*** rotate, flip, flop, crop
*** apply common filters
**** c.f. https://github.com/silvia-odwyer/photon
*** open asset in external program in temporary file
** Data Integrity
*** Guard against concurrent modifications
**** consider how to manage multiple users making changes
**** e.g. two people trying to update the same set of recent imports
**** e.g. two people trying to edit the same asset
**** this is known as the ~lost update~ problem
**** usually managed with a revision number on the record
***** updates must include the revision number; if mismatch, raise error
***** HTTP uses the =ETag= value and the =If-Match= header for this purpose
**** maybe keep an edit history or revision number in separate records
*** Expose data integrity checks in frontend
**** consider if using GraphQL subscriptions would make sense
***** would return each asset id and success bool or list of error codes
***** results would be returned one at a time for the frontend to show progress
***** the error codes would be encoded as GraphQL enums
**** add an option to purge bad records
***** errors of type base64, utf8, missing are not recoverable
**** find files for which there are no documents
*** Should have automated backups of the database
**** every M operations or T minutes/hours/days
*** Add controls for dumping and loading the database
**** provides another mechanism for backup
**** power users could perform large bulk edits of data
** Performance
*** measure and improve the thumbnail serving
**** thoughts on image crate vs magick-rust vs node.js
***** no idea why image crate appears to be faster than magick-rust
***** priming the cache helps actix a great deal because of its concurrency
***** because actix handles many requests concurrently, it creates the same thumbnail many times over
***** node.js seems fast because it creates thumbnail on first request; it processes requests serially
***** however, node.js is 10 times slower than actix in raw performance
***** actix is probably handling 10 times as many requests concurrently
**** consider caching in memory or on disk
***** unbound caching on disk will consume space forever
***** should have an on-disk LRU cache with a set capacity
**** test images for measurements
| byte size | original filename               | identifier                                                       |
|-----------+---------------------------------+------------------------------------------------------------------|
|  12640634 | animal-blur-close-up-678448.jpg | MjAyMC8wNS8yNC8xODAwLzAxZTkzeGp6ODQ0Y252OHZzMzkzNmtkNHExLmpwZw== |
|   3285366 | pexels-photo.jpg                | MjAyMC8wNS8yNC8xODAwLzAxZTkzeGswOTNicjBkYTdqc2J2ejFwczRlLmpwZw== |
|   1613837 | adorable-animal-blur-326875.jpg | MjAyMC8wNS8yNC8xODAwLzAxZTkzeGp5aHl4NjlqN3ptY2V2MnRucjV0LmpwZw== |
|    788961 | japan-cat-snow.jpg              | MjAyMC8wNS8yNC8xODAwLzAxZTkzeGswNjdzMG0xdDkwcmd4ZnhrM3owLmpwZw== |
|    326088 | animal-cat-cute-74177.jpg       | MjAyMC8wNS8yNC8xODAwLzAxZTkzeGp6YTl5NmtkdmNqdnFuNDlzZ3Z5LmpwZw== |
|    160852 | catmouse_1280p.jpg              | MjAyMC8wNS8yNC8xODAwLzAxZTkzeGp6d25keWI5cmN5emVhamE4ajZuLmpwZw== |
|     24402 | cat-in-cat-donut.jpg            | MjAyMC8wNS8yNC8xODAwLzAxZTkzeGp6dnZqZDV4NGdnc3d0NWtheGNmLmpwZw== |
**** image crate, in-memory caching, =hey= default options
***** priming the cache with =hey -n 1 -c 1= to avoid congestion
| file size | response size | average seconds |
|-----------+---------------+-----------------|
|  12640634 |         19508 |          0.0032 |
|   3285366 |         11124 |          0.0035 |
|   1613837 |         12932 |          0.0033 |
|    788961 |         12099 |          0.0034 |
|    326088 |         15397 |          0.0033 |
|    160852 |         11231 |          0.0033 |
|     24402 |         13655 |          0.0035 |
**** Magick-rust with auto_orient/fit using =hey= with default options
***** this is without any in-memory caching
***** none of the images are rotated, so this is as good as it gets
| file size | response size |     average seconds |
|-----------+---------------+---------------------|
|  12640634 |               | too many open files |
|   3285366 |         55477 |              4.0196 |
|   1613837 |         12874 |              7.0632 |
|    788961 |         70088 |              0.5709 |
|    326088 |         15128 |              1.0801 |
|    160852 |         15307 |              0.5394 |
|     24402 |         16750 |              0.2645 |
**** baseline measurements using =hey= with default options
***** this is without any in-memory caching
| file size | response size |   average seconds |
|-----------+---------------+-------------------|
|  12640634 |         19508 | 199/200 timed out |
|   3285366 |         11124 |            2.2119 |
|   1613837 |         12932 |            2.8025 |
|    788961 |         12099 |            0.3350 |
|    326088 |         15397 |            0.5299 |
|    160852 |         11231 |            0.2818 |
|     24402 |         13655 |            0.0544 |
**** measurements of Node.js using =hey= with default options
***** n.b. it is generating a 240x240 pixel thumbnail
| file size | response size | average seconds |
|-----------+---------------+-----------------|
|  12640634 |         11124 |          0.0293 |
|   3285366 |          7608 |          0.0276 |
|   1613837 |          7894 |          0.0278 |
|    788961 |          7213 |          0.0329 |
|    326088 |          9833 |          0.0300 |
|    160852 |          6799 |          0.0287 |
|     24402 |          9713 |          0.0314 |
*** consider if caching search results will improve responsiveness
**** could return a query code to the caller in search meta
**** caller returns that code in the next query to access the cache
**** in this way, the results for a particular query can be cached reliably
**** eventually cached search results need to be pruned
**** RocksDB by default has a block cache of 8mb in 16 shards of 512kb
**** also consider that any caching should live in the data source
*** consider if filtering can be done "in the database" somehow
**** database queries should probably take a filter closure
**** database functions iterate the results, applying the filter
**** the remaining results are then collecting into a vector
** First Hour
*** Initial help screen when there is zero content
*** Describe elements of the home page (e.g. interactive tutorial)
*** Open a web page with helpful first steps
** Product Development
*** Windows support
**** look into getting some sort of certification to bypass SmartScreen
***** c.f. https://getimageview.net/2020/06/02/microsoft-defender-smartscreen-is-hurting-independent-developers/
**** ensure AVI support works fully
***** display thumbnails and play video
***** extract original date/time if available
**** ensure support for popular image formats (whatever is popular on Windows)
***** BMP (Windows Bitmap)
*** Desktop application combined with the server
*** Building the product (build automation)
**** Requirements
***** Consistent builds
***** Need this for building the application, not compiling code
****** dart, flutter, and rust/cargo all know how to compile code
****** need a process to assemble the application deliverable
***** Supports Rust, Dart, Flutter
***** Supports macOS, Windows?, Linux?
***** Likely need a build machine for each target (mac, windows, linux)
***** Contenders
******* https://bazel.build
******* https://please.build
******* https://jenkins.io
******* https://www.buildbot.net
***** Bazel
****** supports all major platforms
****** a very sophisticated replacement for =make=
****** not appropriate for replacing =cargo= or =flutter build=
****** dart: https://github.com/cbracken/rules_dart
****** rust: https://github.com/bazelbuild/rules_rust
****** rust: https://github.com/google/cargo-raze
******* tries to replace cargo to get benefits of bazel
*** Branding: name, logo
*** Tracking issues and releases on a schedule (SCM)
**** Consider if using GitLab (in a container) would be helpful
** Documentation
*** Uploads directory
**** asset importer ignores hidden files and directories
*** Case Sensitivity
- Data is stored as entered (case preservative)
- Attribute lists are all lowercased
- Search is always case insensitive
*** Date/Time values
- Everything is treated as UTC
- EXIF data does not contain timezone information after all
- [[http://www.unicode.org/reports/tr35/tr35-43/tr35-dates.html#Date_Format_Patterns][Date_Format_Patterns]]
** Architecture Review
*** Large file upload
**** split file into chunks, upload one-by-one, showing progress
***** default to 8MB chunks, most images will be smaller than that
*** GraphQL server
**** consider https://github.com/async-graphql/async-graphql as alternative to juniper
***** handles multipart requests (file uploads)
***** provides actix-web integration
** Display modes
*** Slide show mode for assets matching search
**** look for NCS BGM to play during the slide show
*** Image zoom
*** Display 2 or 4 images at once for side-by-side comparison
** Unsorted Features
*** Easy publishing to sharing sites (e.g. Google Photos)
**** option to auto-orient
**** option to resize image
**** option to change format
**** option to strip metadata
**** option to apply watermarks
**** option to save in ePub format for iOS
**** button to open asset in file browser
*** Easy import from external sites (e.g. google, instagram)
*** Multi-user support
**** login page
***** desktop app could use keychain to get access
**** password reset (via email?)
**** access restrictions
**** private sets
**** comments
**** favorites
**** likes
**** rating levels (e.g. mature)
*** Display "N years ago" assets like Facebook does
*** Import directly from the camera
*** Custom metadata
*** Hierarchical categories: People -> Friends -> School
*** Hierarchical locations: USA -> California -> Los Angeles
*** Groups and subgroups of assets
**** Turkey > Gallipoli Peninsula > Gali Winery
**** Winery > vinification > fermentation tanks
**** Architecture > Buildings > underground cellar
*** Converting videos to animated GIFs
*** Extracting a frame from a video
*** Creating a calendar
*** OCR of images, PDFs
*** Task automation
**** e.g. editing image metadata
**** e.g. resize, rotate, format conversion
**** e.g. watermarks
**** e.g. strip location data
****  store changes in "alternates"
*** Scripting support
*** portable mode for thumb-drive based usage
*** demo bundle that includes some preloaded assets
** Productization
*** Application name
**** TODO Try to get a name with "photo", "pic", or something like that
- Helps with SEO and such if the name reflects its intended purpose
**** TODO Look at [[https://www.brandbucket.com/names?search=pic][brandbucket.com]] which has all sorts of great domains and logos for sale
- https://www.brandbucket.com/names?search=pic
- https://www.brandbucket.com/names?search=photo
- picstow: $2795
- picturepile: $2495
- apiqo: $2395
- pictous: $1895
- picuno: $1895
- pictasa: $1675
**** Suggestions
- fotopyle
  - startup name check is green across the board
- fotopile
  - domain for sale, minimum 75 GBP
- traqpics
  - startup name check is green across the board
- PixKeep
  - startup name check is green across the board
  - sounds halfway decent, better than than some others
- Picstashio
  - cool picstash.io domain is available
  - picstashio.com is owned by broken
- picillary
  - startup name check is green across the board
  - google search pulls up some porn results
- Pictello: taken
- Pickled Pixels
  - already taken by a small business in NC (http://www.pickledpixels.biz)
  - icon consists of 4 media elements in a jar (same idea I had)
  - pickledpixels.com is parked and sold for $2000
  - pickledpixels.app is available according to whois
- PicklePixel
  - rolls off the tongue, sounds funny, memorable
  - icon would be a photo in a jar (not a pickle, that would be comical)
  - picklepixel.com is parked
    - registration expires 2019-06-18
  - picklepixel.app is available according to whois
- PicklePixels
  - picklepixels.com is an unused wordpress blog
  - picklepixels.app is available according to whois
- PixelKeeper
  - a character in some game
  - FB pixelkeeper photography, last updated in 2016
  - blogspot account last updated in 2004
  - there is a www.pixelkeeper.cl which seems dead
    - FB page last updated in 2014
    - Twitter account last updated in 2014
  - pixelkeeper.com is registered by vodien.com but apparently unused
    - buydomains.com asks $1088
  - pixel-keeper.com is available according to whois
  - pixelkeeper.app is available according to whois
  - pixelkeeperapp.com is available according to whois
- Pickle
  - "preserving your digital assets" or something like that
  - pickleapp.com and pickle.app are parked
  - there is an app (http://www.pickleeditor.com) called "pickle" but seems old
- Shashin
  - no mac apps with that name
  - "photo" in nihongo
  - shashin.com is registered but dead
  - shashin.app is parked by a registrar in NL
  - shashinapp.com is available according to whois
- Tsukeru
  - no mac apps with that name
  - "to pickle" in nihongo
  - tsukeru.com is registered and appears to be an electrician in Japan
  - tsukeru.app is available according to whois
*** Application Logo, Icon
**** c.f. Creating a Side Project PDF has many logo references
- There is a logo design app on App Store called Logoist, check it out.
- See [[https://www.brandbucket.com][brandbucket.com]] and look for "pictous.com", has a neat logo
  basically a smart phone turned sideways with a camera lens on front
*** TODO Include list of all dependencies and their copyright/license as appropriate
*** TODO Packaging
**** TODO Set up a package build environment
- Look for "authenticode certificate", pay no more than $100/year for a cert
- Can host package files on S3 or similar
*** TODO Determine how to prevent pirating the software
- Does App Store enforce this? Probably not
*** TODO Research what sort of license to use
- Important to limit liability, disavow warranty
*** Documentation
**** Use GitBook and publish on the web site
*** App Store
**** TODO Get an Apple [[https://developer.apple.com/developer-id/][Developer ID]] certificate using Xcode or online
- Need to register with Apple for $100/year to use app store
  - Need a Developer ID certificate for signing apps
    + Need to save this file securely and permanently
  - Application/Installer certificate is for the app store only
**** TODO Get the application notarized by Apple
*** Help and Support
**** Need some help pages
**** Menu item for sending a support request
**** Audit logging so when customers have trouble
***** need a way to know what happened when they call/email
*** News feature
**** Like MyAniList iOS app, fetches news and shows a badge to draw attention to it
- Good way to give updates about the app, CTA for any assistance the user may need
- Have an option to turn off fetching news
** Marketing
*** TODO Clean up social media and blog postings
*** What sets tanuki apart from other tools or approaches?
**** digital curation: organize your photos, pdfs, videos, audio, etc
***** easy to find what you are looking for
***** you control what labels to apply
***** you can apply the information that only you would know
****** i.e. software cannot determine that your photos are related to your wedding anniversary
**** keep everything where you want it (i.e. at home on your computer)
*** Examine feature set of Apple Photos
*** Examine feature set of Windows 10 photos app
*** Primary focus is home users who want to manage their assets
*** Describe how the product is useful
- Focus on permanently keeping, organizing, and viewing your assets
- Easy to install and use, no configuration required
- Easy shared access within your home network
- Browsing from a tablet or phone (via home WiFi network)
- Automatically detect duplicates
*** Describe features and strengths of the app
- Reliable data storage
  - Never overwrites live data
  - Leverages a widely used, robust, storage engine
- Leaves assets intact
  - Does not split or merge assets into a "blob" store
  - Asset directory structure is intuitable
- Easy to use graphical interface
- Built-in network server for sharing within the home
*** Web site
**** Hosting
- Consider https://www.phusionpassenger.com which can host Node.js apps
**** Blog engine
- Static content generator, like https://hexo.io maybe?
**** Domain
- Probably use https://www.namecheap.com/ domain registrar
 - Provide email address that is not part of web domain in case the domain registrar messes up
**** Content
- Animations showing various features (like SublimeText web site)
** Business
*** TODO Write business plan
**** c.f. Creating a Side Project PDF
**** Problem statement
***** Organizing digital assets is tedious without a dedicated tool
**** Product solution
***** Easy to use, inexpensive, desktop application
**** Target audience
***** Casual photographers and families
**** Competition
***** see competitor list below for details
**** Marketing strategy
***** App/Windows Store search
***** Google search ads
**** Monetization
***** Individual purchases through App/Windows Store
*** TODO Copyright the source code [0/2]
- [ ] Add copyright header to the top of all source code
- [ ] Register with the government
*** TODO Trademark the product name
- [ ] Register with the [[https://www.uspto.gov][US Patent & Trademark Office]]
*** TODO Put a plan in place to open source everything upon my unexpected demise
**** At the very least, app should have an easy export feature
*** TODO Make notes from story about publishing on App Store
- http://debuggerdotbreak.judahgabriel.com/2018/04/13/i-built-a-pwa-and-published-it-in-3-app-stores-heres-what-i-learned/
** Customers
*** Photographers
- http://www.bkwinephotography.com/technology/good-dam-digital-asset-management-software/
- http://www.bkwinephotography.com/technology/features-functions-digital-asset-management-system-dam/
- http://www.bkwinephotography.com/technology/found-best-digital-asset-management-dam-system/
*** Casual Collectors
- What features appeal to the casual photographer?
*** Research
**** TODO Conduct a survey on Facebook
- Find out what features real people want in image/video management
**** TODO Research more on the "personal" side of DAM (vs enterprise)
- Consider how to appeal to casual users
- Photographers are a tougher bunch, with many available products
**** Based on small poll from bkwinephotography.com
| Product                | Votes | Price          |
|------------------------+-------+----------------|
| ACDSee                 |    26 | $60            |
| Canto Cumulus          |    14 | (enterprise)   |
| Daminion               |    90 | $175/5 users   |
| DBGallery              |     1 | (enterprise)   |
| digiKam                |    19 | (open source?) |
| Extensis Portfoloio    |    34 | (enterprise)   |
| FotoWare / FotoStation |     8 | (enterprise)   |
| IMatch                 |    31 | $110           |
| Lightroom              |   105 | $150           |
| Media Pro              |    48 | $189           |
| MediaFiler             |     1 | (enterprise)   |
| NeoFinder              |    67 | $40            |
| Photo Supreme          |    35 | $100           |
| OTHER                  |    32 |                |
| NONE                   |    34 |                |
** Competitive Landscape
*** Shotwell Photo Manager?
- Part of Ubuntu 18 desktop
- Evaluate what features it supports
*** [[https://mylio.com][Mylio]]
- Focus on curating assets across devices
*** Apple Photos
- Smart albums based on various criteria
- Face recognition
- Geographic organization
- Groups by time into "albums"
- Prints cards, calendars
- Creates slideshow projects
*** [[https://www.acdsee.com][ACDSee]]
- Geared to professionals
- Focus on photo editing
- Custom rules for workflow (moving, finding, sorting, sharing)
- Sort by date
- Rate images
- Set categories and keywords
- Find duplicates
- Edit EXIF/IPTC/custom metadata
- Color labels and visual tags
*** geeqie
**** http://www.geeqie.org
**** open source
**** linux only (Gtk+ based)
**** lots of interesting features
*** [[https://www.pixelmator.com/pro/][Pixelmator Pro]]
- Heavy focus on editing
- $60
- Mac only?
*** [[https://www.zoner.com][Zoner Photo Studio]]
- Windows only
- $50/year subscription
- Automatic import into folders
- Sort photos by location, date, folders, keywords
- Heavy focus on editing
- Printing services
*** [[https://www.paintshoppro.com/][PaintShop Pro]]
- Windows only
- Focus on editing
*** [[https://github.com/photoprism/photoprism][PhotoPrism]]
**** open source
**** Runs in Docker (only?)
**** Fancier interface than perkeep
**** Oriented toward photographers: tracks metadata, camera details, location details, notes
**** Organizes the "originals" in a fairly shallow directory structure
*** [[https://xequte.com/smartpix/][Smart Pix Manager]]
- Windows only
- $50
- Big on format support, making CD/DVD albums
*** [[http://cerious.com][ThumbsPlus]]
- Windows only
- $60 for simple, $180 for network sharing
- Basically a file manager with attributes stored in a db?
*** Perkeep
**** open source
**** simplistic web interface
**** easy to upload lots of assets
**** automatically deduplicates based on checksum
**** supports easy bulk edit (managing tags)
**** splits assets into blobs (rather undesirable)
*** [[http://www.picajet.com/][PicaJet]]
- Site is pretty old, latest news from 2010
- Windows only
- $60
- 35,000 users
- Multi-user network support
- Management features (e.g. access control)
- Also makes daminion, a small-business DAM system
- Overall very feature-full
*** [[https://www.cyberlink.com/products/photodirector-ultra/][PhotoDirector]]
- macOS and Windows
- Heavy focus on editing
- Offers online storage
*** [[https://www.photools.com][iMatch]]
- Windows only
- Very sophisticated search functionality
- Metadata templates when importing assets
- Open system, no vendor lock-in
- Metadata Working Group compliant
*** [[http://www.pixfiler.com][PixFiler]]
- Windows only
- $40
- Appears old, latest news from 2016
- Appears rather basic
*** [[http://www.lynapp.com/][Lyn]]
- Mac only
- Lightweight
- $20
*** Adobe Photoshop Elements
- Automatic grouping by date, subject, people, places
- Curate photos to arrange them by quality
- Identifies objects in photo and suggests tags
- Focus on editing
*** [[https://unboundformac.com][Unbound for Mac]]
- Looks pretty basic
- $10
- Keeps files in original locations
  - watches for FS changes to keep track
- Keyboard navigation
- 1/5 stars with 3 reviews
*** [[http://www.littlehj.com/mac/][Pixave]]
- $15
- has an iPad version
- looks pretty good
- Drag "tags" onto assets and vice versa to apply tags to assets
*** [[http://x.photoscape.org][Photoscape X]]
- Mac and Windows
- Focus on editing
