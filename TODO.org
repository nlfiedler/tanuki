* Tanuki
** Backend Rewrite
*** Clean Architecture design
**** use dependency injection to connect parts together
***** https://crates.io/crates/shaku (compile-time IoC)
***** https://crates.io/crates/coi (compile-time IoC)
***** consider if writing one from scratch (a la =get_it=) would be adequate
**** use TDD and mocking to develop from the inside out
***** https://crates.io/crates/mockall
**** entities
***** asset
***** location (label, gps, etc)
***** search result (location, media type, filename, date)
**** use cases
***** count all assets
***** import asset
***** update asset details
***** get all locations
***** get all years
***** get all tags
***** search for assets
***** get asset by checksum
***** fetch asset details
***** backup the database (an automatic function?)
****** use repository to invoke backup/restore functions
****** data source for record database invokes the db functions
**** repositories
***** record database
***** blob store
*** Thumbnail Serving Strategy
**** capture the image/video dimensions during import, save to asset record
***** a larger asset record in CBOR format is ~260 bytes, a few more bytes is okay
***** in PouchDB, each record takes almost exactly 1 kilobyte
***** use =u32= for each dimension (should be more than enough)
**** on import, ensure asset identifier ends with correct media type extension
***** if provided filename does not end in the correct extension, append it
****** use the provided media type to know what extension to add
***** this ensures correct guessing of media type when making thumbnails
***** n.b. all thumbnails and previews are image/jpeg anyway so this is not necessary
***** if, someday, the provided media type is "unknown", then use mime sniffer
***** c.f. https://developer.mozilla.org/en-US/docs/Mozilla/How_Mozilla_determines_MIME_Types
***** c.f. https://github.com/flier/rust-mime-sniffer
**** the frontend can use the image dimensions to compute the aspect ratio
**** with the aspect ratio, frontend can request images of the desired size
**** frontend can ask for images that are N pixels high or M pixels wide, or whatever
***** by leaving one dimension maxed out, the image aspect ratio will be maintained
**** as long as client keeps asking for the same basic size, backend can cache them
**** when generating thumbnail, always use jpeg format so content type is =image/jpeg=
*** TODO improve thumbnail caching support (=ETag= and =If-None-Match=)
**** need to include an etag and respond properly to if-none-match requests
**** create a =Thumbnail= type that implements =actix_web::Responder=
**** the =respond_to()= returns a future so can use async/await
**** in =respond_to()= can check the asset exists, check if the etag matches, generate thumbnail
**** respond with =StatusCode::NOT_MODIFIED= if not modified
**** respond with =OK= and the data if the etag does not match
**** c.f. https://github.com/actix/actix-web/blob/master/actix-files/src/named.rs
**** c.f. https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/If-None-Match
**** c.f. https://web.dev/http-cache/
*** TODO measure and improve the thumbnail serving
**** seems kinda slow, use =hey= to measure performance
**** use =hey= to compare the same behavior with JavaScript impl
***** measure both with and without in-memory caching
**** consider changing the quality factor when producing the jpeg
**** consider caching in memory or on disk
***** typical thumbnail is 40-50kb
*** TODO plan how database migrations will happen in the future
**** maintain a meta record with version information
**** look at how the serde.rs library can help
*** TODO extract metadata from incoming video assets
**** get the duration of videos in seconds
**** get the creation time of videos
**** need Rust bindings for =ffprobe= and =ffmpeg=
***** https://crates.io/crates/ffmpeg4 (WTFPL)
***** https://crates.io/crates/ffmpeg-dev (MIT/LGPL)
***** https://crates.io/crates/ffmpeg-next (WTFPL)
**** consider parsing the metadata to get the information
*** TODO video thumbnails
**** there are already some videos that have thumbnails
**** they have =.jpg= extension instead of the original (=.mov=)
**** should these be retained, removed, or rebuilt?
**** should these be generated on import, or as needed?
*** TODO test video playback in all browsers
**** =actix-files= should support range requests so Safari will be satisfied
*** TODO ensure there is no longer any =dead_code= or remove the pragma
*** TODO set up logging similar to zorigami
**** should be effectively disabled for testing (i.e. off by default)
*** TODO set up docker build for rust code and healthcheck
**** c.f. https://github.com/mastertinner/healthcheck
***** it has been updated since the copy in zorigami
**** look at https://github.com/bencord0/docker-healthcheck/
*** TODO write an export script for the old database
**** stand-alone script that reads the database and writes out json
*** TODO write an import binary for the new database
**** stand-alone binary that reads json and populates new database
**** read the image/video dimensions to insert into asset record
**** append correct extension to asset identifier so it matches the assigned media type
*** TODO test database migration on development system
*** TODO perform migration on production system
**** stop and remove the current docker container
**** use script to get dump of current database
**** backup the database files somewhere safe
**** run the new binary to populate new database from data dump
**** deploy new docker container with new backend
*** TODO move =test/fixtures= under =tests=
*** TODO remove JavaScript code from =src= and =test=
*** TODO remove Node modules related to backend
*** TODO remove the incomplete =server= Dart code
*** TODO remove remaining old backend files
**** =public/schema.graphql=
**** =views/=
*** TODO document build instructions for Rust in README
**** =cargo build=
**** =cargo test=
**** =cargo update=
**** =cargo outdated=
**** =cargo clean=
**** =RUST_LOG=info cargo run=
*** TODO document the clean architecture of this code base
** Fix mujina
*** Asset details
**** does not have image urls
*** File upload
**** Cannot use the apollo-client upload feature
**** Upload each asset to the HTTP endpoint instead of GraphQL
** Frontend Rewrite
*** Use Dart and Flutter
*** Use Clean Architecture
**** define the features
***** browse
***** search
***** import
***** export
***** edit
*** TODO Move the files under =client/= to the root
*** TODO find out how to upload a file
**** https://rodolfohernan20.blogspot.com/2019/12/upload-files-to-server-with-flutter-web.html
**** example code: https://github.com/rjcalifornia/web_upload
*** TODO how to handle file drops
**** drop zone gist: https://gist.github.com/PlugFox/ffe83a91ce50f9c78a5b1d6674e36d1b
**** for now this is not so important, just use file selector a la =web_upload= example
*** TODO use docker container to build web assets
*** Thoughts on the design
**** browse and search
***** unify the two pages into one
***** with the "crane" like selectors, the search is just another row of inputs
***** that is, normally the second row is collapsed, but clicking a button expands it
***** the second row would have the date range, file name, and media type
**** quick import
***** drag/drop and/or file open to add lots of assets
***** immediately import everything to the backend
***** show progress and display thumbnails as assets are successfully imported
***** switch to the "recent imports" screen showing just these new assets
***** user selects multiple assets and applies tags and locations to them
***** click on an asset to enter a caption in place (without leaving the gallery view)
**** image gallery selectors
***** instead of showing all of the tags, years, locations at once
****** see the "crane" flutter gallery sample for the basic layout and appearance
****** use input fields with small icons on the left and drop-down button on the right
****** typing into the field will perform completion for tags, locations, years
****** clicking on the drop-down will offer selection of attributes
****** once entered or selected, input fields show active selectors
****** maybe have a small x to deactive active selectors
****** can also remove selectors by backspacing
**** image gallery display
***** show additional details on mouse hover
***** button in corner of thumbnail to select assets to edit, download, etc
**** asset detail page
***** seems popular to show the gallery items as small thumbnails along the top (horizontally scrollable)
***** have chevron buttons on both sides to navigate through gallery items
**** timeline style display for all assets
***** without any selectors, just show most recent going back in time
*** ideas and widget usage
**** Look at the Flutter "Gallery" app ("crane") for a pretty example
***** gently rounded image corners
***** gallery background has rounded corners
***** pleasing captions
***** interesting not-quite-grid (column oriented) arrangement
***** selectors across the top
***** floating ~Back~ button at the bottom left
**** Consider how to have a "light" and "dark" mode
**** Look for the =video_player= web plugin for playing video in webui
**** use =RichText= widget to style the captions (e.g. make tags bold)
**** tags in caption could be "gesture sensitive" (i.e. clickable) to show assets with that tag
**** =ListView.builder= allows building list items on demand
***** c.f. https://medium.com/flutter-community/flutter-infinite-list-tutorial-with-flutter-bloc-2fc7a272ec67
**** =Image= has a loading builder for showing progress of network images
**** use =semanticLabel= on =Image= for accessibility
**** =Wrap= will do what =flex-flow: row wrap;= does in CSS
**** alternative to row wrapping would be columns of images
***** need to make the number of columns responsive to window width
**** =FutureBuilder= for showing things that load asynchronously
**** use =SliverAppBar= in place of =AppBar=, it will shrink when content is scrolled
***** could be a good way to keep controls above scrolling content
**** use =FadeInImage= to show a placeholder while loading a remote image
**** maybe use =Hero= to animate/transition from image gallery to a single image
***** click on item in a list/grid and it expands to the details page
**** can use =DataTable= to display labeled data (like asset details, metadata)
**** use pointer enter/exit events to start playing a video in place
*** TODO remove ReasonML related code and Node modules
**** should be nothing JavaScript/Node/Reason left at this point
**** =bsconfig.json=
**** =graphql_schema.json=
**** =gulpfile.js=
**** =node_modules=
**** =package.json=
**** =package-lock.json=
**** =public=
**** =src/*.re=
**** =lib/js=
**** =lib/bs=
**** update =.gitignore= and =.dockerignore=
** Testing
*** TODO Consider how to test the web endpoints
** Performance
*** use =hey= to measure image serving performance
**** =brew install hey= (the =ab= replacement)
**** =hey -n 10000 http://localhost:<port>/=
***** numbers below are for serving =index.html=
***** ~-exe~ is the compiled executable
| service            |   qps |
|--------------------+-------|
| apache             | 15000 |
| zorigami           |  9400 |
| tanuki (node)      |  3000 |
| tanuki (shelf-exe) |  2600 |
| tanuki (angel-exe) |  1010 |
*** consider if caching the thumbnails will improve responsiveness
*** consider if caching search results will improve responsiveness
**** could return a query code to the caller in search meta
**** caller returns that code in the next query to access the cache
**** in this way, the results for a particular query can be cached reliably
**** eventually cached search results need to be pruned
**** RocksDB by default has a block cache of 8mb in 16 shards of 512kb
**** also consider that any caching should live in the data source
** Search Improvements
*** TODO Support advanced queries using Google-style operators
**** c.f. https://support.google.com/websearch/answer/2466433?hl=en
**** move perkeep style query support from mujina to tanuki
**** webui needs an "advanced" tab/link selector on the search page
**** =is:image= and similar to filter by media type
**** =with:<name>= to filter by people (need to know the people though)
**** =AND= and =OR= operators and grouping with parentheses
*** TODO Avoid loading all results into memory and then filtering
**** database queries should probably take a filter closure
**** database functions iterate the results, applying the filter
**** the remaining results are then collecting into a vector
*** TODO Support searching for assets that have no tags at all
*** TODO Support searching for assets that have no location at all
*** TODO Support searching for assets that have no caption at all
*** TODO Support searching the caption text
**** likely would involve a full table scan
*** TODO Support wildcards in filename, mimetype (others?)
**** likely would involve a full table scan
*** TODO Query for image assets whose orientation is incorrect/unknown
** Data Format Support
*** EXIF reference
**** https://www.media.mit.edu/pia/Research/deepview/exif.html
*** could check for thumbnails in image EXIF data
**** look for =JPEGThumbnail= or =TIFFThumbnail=
*** TODO blob import always saves auto-oriented images as JPEG
**** should detect the format and use one of the other libvips save functions
*** TODO support HEIF images
**** https://crates.io/crates/libvips (MIT) reads/writes HEIF
**** https://github.com/oussama/libheif-rs (MIT)
**** https://crates.io/crates/kamadak-exif (BSD) reads metadata
*** TODO Detect time zone offset in EXIF data
According to Wikipedia the 2.31 version of EXIF will support time-zone
information. Eventually, the application should be able to detect this and
include it in the database records.

: There is no way to record time-zone information along with the time, thus
: rendering the stored time ambiguous. However, time-zone information have
: been introduced recently by Exif version 2.31 (July 2016). Related tags are:
: "OffsetTime", "OffsetTimeOriginal" and "OffsetTimeDigitized".

*** TODO Extract location information from images
**** write a data migration to process existing assets
**** existing location values should be stored in a "label" field
**** exact location information would be stored separate from label
*** TODO Read metadata from PDF files
**** probably has a creation date or some sort
*** TODO Show the =AAE= files as plain text (they are xml)
** Bulk edit
*** Short term solution akin to perkeep web interface
- [ ] Easy selection with hover checkbox button
  - Could use =svg= tag to render the button
  - See pexels.com in that it uses article tag, with nested img and button with nested svg
- [ ] When selections, filters panel changes to show available actions
- [ ] Actions include adding, deleting tags, setting location
  - This is basically a simplified bulk edit
- [ ] Use a prefix for the checksum values
*** Design bulk edit solution, probably similar to JIRA
- [ ] Access the bulk edit screen via a menu item
- [ ] Use search form
- [ ] Perform search, present results using "list" view
- [ ] Check off results as desired
- [ ] Next page presents several operations
  - [ ] add location
  - [ ] remove location
  - [ ] rename location
  - [ ] add a tag
  - [ ] remove a tag
  - [ ] rename a tag
  - [ ] set caption
  - [ ] change media type
** Documentation
*** Case Sensitivity
- Data is stored as entered (case preservative)
- Attribute lists are all lowercased
- Search is always case insensitive
*** Date/Time values
- Uses 24 hour clock, displays using local time zone, stored as UTC
- [[http://www.unicode.org/reports/tr35/tr35-43/tr35-dates.html#Date_Format_Patterns][Date_Format_Patterns]]
** Multi-file Upload
*** could theoretically allow the upload of multiple files
*** with HTML forms, set =multiple= to =true= on the file input field
*** this would fall under "quick import": just throw everything into the collection
*** after upload, show the "recent imports" page so the user can make edits
** Architecture Review
*** GraphQL server
**** consider https://github.com/async-graphql/async-graphql as alternative to juniper
***** handles multipart requests (file uploads)
***** provides actix-web integration
** Desktop app
*** Need setup for configuration system
**** properties
***** path for database files
***** path for where file uploads go temporarily
***** path for where assets are stored
**** default configuration setup at build-time
***** would be nice to have something like Dart's =environment_config=
****** could use =build.rs= to generate an environment config
******* then load that in =main.rs= to get everything into memory
***** https://github.com/andoriyu/uclicious (BSD)
***** https://github.com/mehcode/config-rs (MIT)
**** screen for configuring the settings
*** Showing the licenses/about dialog
**** c.f. "licenses" on https://flutter.dev/docs/resources/faq
** Mobile web support
*** Progressive Web App support in Flutter is coming
*** Use PWA to get app-like behavior on mobile devices
*** Look for package (like image_picker) that enables user to select photos to upload
** Mobile app
*** Use [[https://pub.dev/packages/image_picker][image_picker]] to allow user to select images from photo library
** Build Automation
*** For building the applications
*** Requirements
**** Consistent builds
**** Need this for building the application, not compiling code
***** dart, flutter, and rust/cargo all know how to compile code
***** need a process to assemble the application deliverable
**** Supports Rust, Dart, Flutter
**** Supports macOS, Windows?, Linux?
**** Likely need a build machine for each target (mac, windows, linux)
**** Contenders
****** https://bazel.build
****** https://please.build
****** https://jenkins.io
****** https://www.buildbot.net
**** Bazel
***** supports all major platforms
***** a very sophisticated replacement for =make=
***** not appropriate for replacing =cargo= or =flutter build=
***** dart: https://github.com/cbracken/rules_dart
***** rust: https://github.com/bazelbuild/rules_rust
***** rust: https://github.com/google/cargo-raze
****** tries to replace cargo to get benefits of bazel
** SCM
*** Consider if using GitLab (in a container) would be helpful
** Extra Features
*** Image orientation
**** maybe not everyone is going to like that the images get auto-oriented on imports
**** could optionally leave the image alone and auto-orient when serving
**** c.f. https://www.daveperrett.com/articles/2012/07/28/exif-orientation-handling-is-a-ghetto/
** Design Notes
*** Dart vs Rust
| Dart YES            | Dart NO              | Rust YES              | Rust NO      |
|---------------------+----------------------+-----------------------+--------------|
| productive language | no good database     | embedded database     | slow compile |
| good image library  | no secondary index   | secondary index       |              |
|                     | buggy GraphQL server | proven GraphQL server |              |
|                     | very slow web server | very fast web server  |              |
*** shelf vs angel
**** shelf
***** faster for both vm and native
***** generally more coding effort
***** lacks file upload (see shelf issue 119)
**** angel
***** has everything (static files, CORS, etc)
***** supports HTTP and GraphQL thoroughly
***** integration of graphql is very easy
** Legacy ReasonML, Node.js
*** N.B. bs-platform module version
**** cannot upgrade to 7.0.1 because ReasonApollo fails to compile
*** N.B. react-apollo module version
**** reason-apollo still depends on react-apollo 2.5.8
**** upgrading react-apollo to >3.x breaks reason-apollo
**** must wait until reason-apollo updates their dependencies
*** Front-end improvements
**** TODO Debounce the data validation fields using async validators
**** TODO Consider how to make thumbnail page responsive
***** Show 1, 2, 3, or more depending on browser width
***** Should be able to leverage CSS for this
**** TODO Asset preview page shows a broken link, should show placeholder image
**** TODO Add error boundary handling (requires React API changes)
***** waiting on support for =didCatch= in React Hooks API
***** also likely need the API exposed via ReasonReact
***** see the =ErrorBoundary= module definition in =Index.re=
**** TODO Use a lightbox component for displaying assets
***** c.f. https://creativebulma.net/product/lightbox/demo
*** Bugs
**** TODO Sometimes the front-end misses updates from backend?
***** e.g. click a tag, images fail to appear; click and click again, works
***** zorigami has this problem, too; seems like ReasonML is failing somehow
***** find out what is going on when this happens
**** TODO Home page fails to update after data changs
***** TODO Home page stays stuck on "upload" even after images are uploaded
****** name the =CountAssets= query and add to the =refetchQueries= list
***** TODO After editing asset, selections need to elide newly removed tags
****** that is, found "opa)", selected assets, fixed them, now cannot clear selection
****** need to attach an update function after the edit asset mutation completes
****** c.f. =onCompleted= prop on =mutation= function
******* https://www.apollographql.com/docs/react/essentials/mutations/
****** can also set =awaitRefetchQueries= to wait for refetch to complete
****** could move Locations/Tags/Years logic into =Home= and handle everything there
****** could use GraphQL subscriptions in =Home= to keep track of changes
*** Development Support
**** TODO Figure out how to deal with the GraphQL schema weirdness
***** The introspection tool generates weird types for the non-optional array of strings
***** Maybe that tool is correct and my types are wrong?
***** Or maybe that tool has an update that fixes this?
***** c.f. commit =b8fa735=
** Old "rewrite backend in Dart" notes
*** DONE find a web framework
**** DONE read https://dart.dev/tutorials/server/httpserver
**** DONE read https://dart-lang.github.io/server/
***** all rather out of date
**** DONE ensure support for CORS requests
***** dart example in =httpserver= just injects the headers
***** see =note_server.dart= in https://github.com/dart-lang/dart-tutorials-samples/
**** DONE ensure support for static files
***** use =VirtualDirectory= from =http_server= package
***** see =static_file_server.dart= example of serving =index.html= by default
**** DONE catch-all route that sends everything else to the SPA
**** DONE evaluate https://pub.dev/packages/http_server
***** only API documentation, no examples or guides
***** probably meant to use shelf instead of this directly
***** theoretically can do everything, it's just all manual
**** DONE evaluate https://github.com/dart-lang/shelf
***** inspired by connect, rack, wsgi
***** similar to warp or plug, modular design for composable servers
***** offers logging middleware
****** look at how to integrate with https://pub.dev/packages/logging
***** easy request handling with "handlers"
***** easy composability with "pipelines"
***** static files: https://pub.dev/packages/shelf_static
***** routing: https://pub.dev/packages/shelf_router
**** DONE evaluate https://github.com/stablekernel/aqueduct
***** essentially a one developer project
***** featureful all-in-one framework
***** primarily focused on REST
***** supports automated testing
***** seems a bit big and far more than needed for tanuki
**** DONE evaluate https://pub.dev/packages/angel_framework
***** largely inspired by express.js
***** only one developer, at risk of abandonment
***** many add-on modules for various functionality
***** supports automated testing
***** scaffold generator is broken due to monorepo changes
***** considerably slower than shelf, and more so when native
**** DONE evaluate https://jaguar-dart.com
***** not updated since last July
**** DONE get a basic web server going with shelf
***** DONE serve some requests
***** DONE set up logging (console by default)
***** DONE take the port number from the environment (default 4000)
***** DONE take the host address from environment (default 'localhost')
***** DONE serve the static files
***** DONE serve a static GraphQL response
***** DONE add CORS headers using middleware
***** DONE check that =OPTIONS= method is handled
***** DONE check that correct mimetype is returned for static files
***** DONE map all missing results to =index.html= (i.e. no 404)
***** DONE =GET= on =/graphql= route throws errors now
**** DONE use some load testing tool to ensure core use
***** =ab= is already installed but dated and often freezes
***** =brew install hey= (the ab replacement, works better)
***** =hey -n 10000 http://localhost:<port>/=
****** ~-exe~ is the compiled executable
| service              |   qps |
|----------------------+-------|
| apache               | 15000 |
| tanuki (node)        |  3000 |
| tanuki (shelf)       |  2500 |
| tanuki (shelf-exe)   |  2600 |
| tanuki (angel)       |  1400 |
| tanuki (angel-exe)   |  1010 |
| shelf basic example  |  6300 |
| shelf router example |  6100 |
| zorigami (rust)      |  9400 |
*** old shelf related work
**** shelf: add automated testing of http handlers
***** c.f. https://stackoverflow.com/questions/42824533/unit-testing-with-darts-shelf-rest
**** shelf: integrate =graphql_server= into existing shelf solution
***** c.f. https://graphql.org/learn/serving-over-http/
***** shelf lacks file upload via multi-part posts
****** c.f. https://github.com/dart-lang/shelf/issues/119
****** makes the graphql file upload impossible
**** shelf: consider how to add GraphiQL functionality
*** DONE try using [[https://angel-dart.dev/][angel]] for web
**** DONE serve a canned response to =GET /=
**** DONE read https://docs.angel-dart.dev/v/2.x/guides/getting-started
**** DONE set up request logging
**** DONE get host and port from environment
**** DONE serve static files
**** DONE ensure proper mimetype for static files
**** DONE add route for canned graphql response
**** DONE map fallback route to the =index.html= file
**** DONE respond with CORS headers as needed
**** DONE ensure =OPTIONS= handled for graphql route
**** DONE remove the unused packages added in commit =378700b=
*** DONE find a graphql server
**** DONE look for support for GraphiQL or Playground
**** DONE evaluate https://pub.dev/packages/graphql_server
**** DONE evaluate https://pub.dev/packages/angel_graphql
*** DONE set up angel graphql server
**** DONE add =cors= into the middleware (for graphql route)
**** DONE see how to write resolvers with angel_/graphql_server
**** DONE find out how to define input objects: use =inputField()= helper
**** DONE see how to do file uploads with =angel_graphql=
***** defined as =GraphQLUploadType= in =angel_graphql= with name =Upload=
**** DONE convert the =schema.graphql= to Dart types
**** DONE define the =BigInt= type and use for filesize
**** DONE write some basic tests for the schema
*** DONE finish incorporating Angel web framework
**** DONE consider splitting the dart and flutter code into separate packages
***** angel tests work without errors when in a plain dart package
***** DONE read https://code.visualstudio.com/docs/editor/multi-root-workspaces
***** DONE move the flutter code into =client=
***** DONE move the dart code into =server=
***** DONE ensure =pendantic= is set up in =client=
***** DONE ensure =pendantic= is set up in =server=
***** DONE ensure the =.gitignore= files are good
***** DONE copy the test code from =test-angel=
***** DONE document the setup and build procedure
****** edit each of the =README.md= files
****** development process for running application
******* console 1: cd server ; pub run bin/main.dart
******* console 2: cd client ; flutter run -d chrome
****** run =flutter build web= in =client=
****** copy build output to =server/build/web=
****** eventually automate this procedure
**** DONE add testing: https://github.com/angel-dart/angel/tree/master/packages/test
***** fallback response to unrouted request
#+BEGIN_SRC shell
$ curl -D - http://localhost:4040/foobar
HTTP/1.1 200 OK
accept-ranges: bytes
cache-control: public, max-age=0
content-length: 1031
content-type: text/html
etag: 1582075543000
expires: Thu, 27 Feb 2020 04:03:09 GMT
last-modified: Wed, 19 Feb 2020 01:25:43 GMT
#+END_SRC
***** static image request and response
#+BEGIN_SRC shell
$ curl -D - http://localhost:4040/icons/Icon-192.png
HTTP/1.1 200 OK
accept-ranges: bytes
cache-control: public, max-age=0
content-length: 5292
content-type: image/png
etag: 1581826445000
expires: Thu, 27 Feb 2020 03:23:25 GMT
last-modified: Sun, 16 Feb 2020 04:14:05 GMT
#+END_SRC
***** CORS request and response
#+BEGIN_SRC shell
$ curl -H 'Origin: example.com' -D - -X OPTIONS http://localhost:4040/graphql
HTTP/1.1 204 No Content
access-control-allow-origin: *
access-control-allow-methods: GET,HEAD,PUT,PATCH,POST,DELETE
content-length: 0
content-type: text/plain
#+END_SRC
*** TODO assessment of available packages
**** TODO write quick tests for everything tanuki needs [9/12]
- [X] rocksdb
- [X] detect orientation
- [X] rotate image
- [X] exif
- [ ] jfif
- [ ] tiff
- [X] media type detection
- [X] thumbnails
- [X] web server
- [X] GraphQL client
- [X] GraphQL server
- [ ] ffmpeg metadata access
**** TODO assess Windows support for everything
*** TODO Figure out what the GraphQL object field resolvers really do
**** seems like they are not invoked (e.g. resolver for =filename= field of asset is not called)
**** API doc suggests that Maps are probed automatically, so resolver is called if it is an object?
*** TODO Get information from video files
**** Dart packages for ffmpeg have limited platform support
**** May be easier to write Dart code to extract the information from the file
***** this would avoid having additional static file dependencies
**** Alternatively, write our own wrapper for ffmpeg (it's just commands)
*** TODO consider how to support multicore with isolates
**** aqueduct does this apparently
**** c.f. https://stablekernel.com/concurrency-in-server-side-dart/
**** logging is handled by a single isolate
**** read about async dart and "zones"
