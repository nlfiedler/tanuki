* Tanuki
** General Items
*** TODO Figure out how to migrate to Reason Apollo 0.16
*** TODO Use the new =[@react.component]= notation for ReasonReact components
*** TODO Upgrade to react-jsx version 3
**** c.f. https://reasonml.github.io/reason-react/docs/en/jsx
**** will need to update bs-reform at the same time
*** TODO Update reason react router
**** c.f. https://reasonml.github.io/reason-react/docs/en/router
*** TODO Update =bs-reform= at some point
*** TODO Temporarily figure out how to deal with the GraphQL schema weirdness
**** The introspection tool generates weird types for the non-optional array of strings
**** Maybe that tool is correct and my types are wrong?
**** Or maybe that tool has an update that fixes this?
**** c.f. commit =b8fa735=
*** TODO Home page fails to update after data changs
**** TODO Home page stays stuck on "upload" even after images are uploaded
***** name the =CountAssets= query and add to the =refetchQueries= list
**** TODO After editing asset, selections need to elide newly removed tags
***** that is, found "opa)", selected assets, fixed them, now cannot clear selection
***** need to attach an update function after the edit asset mutation completes
***** c.f. =onCompleted= prop on =mutation= function
****** https://www.apollographql.com/docs/react/essentials/mutations/
***** can also set =awaitRefetchQueries= to wait for refetch to complete
***** could move Locations/Tags/Years logic into =Home= and handle everything there
***** could use GraphQL subscriptions in =Home= to keep track of changes
*** TODO Consider how to make thumbnail page responsive
**** Show 1, 2, 3, or more depending on browser width
**** Should be able to leverage CSS for this
*** TODO Debounce the form input validation (i.e. asset edit and search forms)
*** TODO Support searching the caption text
*** TODO Support wildcards in filename, mimetype (others?)
*** TODO Extract exact location information from images [0/4]
- [ ] Write a data migration to process existing assets
- [ ] Incoming needs to extract this information for new assets
- [ ] Existing location values should be stored in "label" field
- [ ] Exact location information should be stored separate from label

*** TODO Need a query to find image assets whose orientation is incorrect/unknown
*** TODO Asset preview page shows a broken link, should show placeholder image
*** TODO Thumbnail size cache population is noticably slow when selecting many assets
*** TODO When performing image manipulations, invoke =sharp.withMetadata()= to preserve metadata
*** TODO Use an =iframe= to preview Markdown generated as HTML
*** TODO Read [[https://github.com/MtDalPizzol/pouchdb-permissions][pouchdb-permissions]] for possible use in user/groups access
*** TODO Detect time zone offset in EXIF data
According to Wikipedia the 2.31 version of EXIF will support time-zone
information. Eventually, the application should be able to detect this and
include it in the database records.

: There is no way to record time-zone information along with the time, thus
: rendering the stored time ambiguous. However, time-zone information have
: been introduced recently by Exif version 2.31 (July 2016). Related tags are:
: "OffsetTime", "OffsetTimeOriginal" and "OffsetTimeDigitized".

** Rust rewrite
*** Action Plan
**** TODO Translate caption parsing code
**** TODO Translate query parsing code
**** TODO Translate database layer
***** should enable WAL by default
***** need a plan for the index
Could have =my-index-on-field/<value>-NNN= keys that have a single record
reference. Then use a key iterator to scan those values within a key range
(it is very efficient). For multiple query terms, would sort and merge the
results to get the final result.

The =NNN= could be a ulid or a monotonically increasing number. Depends if
the range scan iterators can take a wildcard for the starting key and move
from there. Otherwise, would want to have a ~sequence~ type of selector
from the database to facilitate the counter.
***** could use =GetUpdatesSince()= to tail updates to the default column family
and then update the reverse index as new documents are written
***** RocksDB FAQ seems to suggest using column families for different "key spaces"
****** c.f. https://github.com/facebook/rocksdb/wiki/Column-Families
***** data migration would likely involve rebuilding the indices
*** Libraries
**** Facial recognition
***** https://crates.io/crates/opencv (WTFPL)
**** Videos
***** need Rust bindings for =ffprobe= and =ffmpeg=
****** https://crates.io/crates/ffmpeg-next
****** https://crates.io/crates/metadata
***** see if there are alternatives for Rust
**** Images
***** HEIF: https://github.com/oussama/libheif-rs
***** give this a try: https://github.com/imazen/imageflow
***** search crates.io for =vips= bindings, there are several
***** if all else fails, can use =magick-rust= (needs bindgen updates soon)
** Documentation
*** Case Sensitivity
- Data is stored as entered (case preservative)
- Attribute lists are all lowercased
- Search is always case insensitive

*** Date/Time values
- Uses 24 hour clock, displays using local time zone, stored as UTC
- [[http://www.unicode.org/reports/tr35/tr35-43/tr35-dates.html#Date_Format_Patterns][Date_Format_Patterns]]
