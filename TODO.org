* Tanuki
** TODO Rewrite backend in Rust
*** TODO Translate caption parsing code
*** TODO Translate query parsing code
*** TODO Translate database layer to use RocksDB
***** should enable WAL by default
***** need a secondary index to support queries
****** write a simple secondary index library for RocksDB, publish to crates.io
******* others will eventually contribute and make it better
****** look for "rocksdb secondary index" on the web
******* https://misfra.me/2017/01/18/how-to-implement-secondary-indexes/
******* index key is the information you're search for, value is the original key
******* important to keep the keys unique and canonically formed
****** see the algorithms in the research paper on secondary indices on LSM key/value stores
****** supporting non-unique index keys requires an additionaly unique element (e.g. ULID)
Could have =my-index-on-field/<value>-NNN= keys that have a single record
reference. Then use a key iterator to scan those values within a key range
(it is very efficient). For multiple query terms, would sort and merge the
results to get the final result.

The =NNN= could be a ulid or a monotonically increasing number. Depends if
the range scan iterators can take a wildcard for the starting key and move
from there. Otherwise, would want to have a ~sequence~ type of selector
from the database to facilitate the counter.
***** could use =GetUpdatesSince()= to tail updates to the default column family
and then update the reverse index as new documents are written
***** RocksDB FAQ seems to suggest using column families for different "key spaces"
****** c.f. https://github.com/facebook/rocksdb/wiki/Column-Families
***** data migration would likely involve rebuilding the indices
*** Libraries
**** Facial recognition
***** https://crates.io/crates/opencv (WTFPL)
**** Videos
***** need Rust bindings for =ffprobe= and =ffmpeg=
****** https://crates.io/crates/ffmpeg-next
****** https://crates.io/crates/metadata
***** see if there are alternatives for Rust
**** Images
***** HEIF: https://github.com/oussama/libheif-rs
***** give this a try: https://github.com/imazen/imageflow
***** search crates.io for =vips= bindings, there are several
***** if all else fails, can use =magick-rust= (needs bindgen updates soon)
** Front-end improvements
*** TODO Debounce the data validation fields using async validators
*** TODO Consider how to make thumbnail page responsive
**** Show 1, 2, 3, or more depending on browser width
**** Should be able to leverage CSS for this
*** TODO Asset preview page shows a broken link, should show placeholder image
*** TODO Add error boundary handling (requires React API changes)
**** waiting on support for =didCatch= in React Hooks API
**** also likely need the API exposed via ReasonReact
**** see the =ErrorBoundary= module definition in =Index.re=
** Backend improvements
*** TODO Rewrite in Rust
*** TODO Support advanced queries using Google-style operators
**** c.f. https://support.google.com/websearch/answer/2466433?hl=en
**** move perkeep style query support from mujina to tanuki
**** webui needs an "advanced" tab/link selector on the search page
*** TODO Thumbnail size cache population is noticably slow when selecting many assets
** Bugs
*** TODO Sometimes the front-end misses updates from backend?
**** e.g. click a tag, images fail to appear; click and click again, works
**** find out what is going on when this happens
*** TODO Home page fails to update after data changs
**** TODO Home page stays stuck on "upload" even after images are uploaded
***** name the =CountAssets= query and add to the =refetchQueries= list
**** TODO After editing asset, selections need to elide newly removed tags
***** that is, found "opa)", selected assets, fixed them, now cannot clear selection
***** need to attach an update function after the edit asset mutation completes
***** c.f. =onCompleted= prop on =mutation= function
****** https://www.apollographql.com/docs/react/essentials/mutations/
***** can also set =awaitRefetchQueries= to wait for refetch to complete
***** could move Locations/Tags/Years logic into =Home= and handle everything there
***** could use GraphQL subscriptions in =Home= to keep track of changes
** Development Support
*** TODO Figure out how to deal with the GraphQL schema weirdness
**** The introspection tool generates weird types for the non-optional array of strings
**** Maybe that tool is correct and my types are wrong?
**** Or maybe that tool has an update that fixes this?
**** c.f. commit =b8fa735=
** Search Improvements
*** TODO Support searching the caption text
*** TODO Support wildcards in filename, mimetype (others?)
*** TODO Need a query to find image assets whose orientation is incorrect/unknown
** Data Format Support
*** TODO Use an =iframe= to preview Markdown generated as HTML
*** TODO Detect time zone offset in EXIF data
According to Wikipedia the 2.31 version of EXIF will support time-zone
information. Eventually, the application should be able to detect this and
include it in the database records.

: There is no way to record time-zone information along with the time, thus
: rendering the stored time ambiguous. However, time-zone information have
: been introduced recently by Exif version 2.31 (July 2016). Related tags are:
: "OffsetTime", "OffsetTimeOriginal" and "OffsetTimeDigitized".

*** TODO Extract exact location information from images [0/4]
- [ ] Write a data migration to process existing assets
- [ ] Incoming needs to extract this information for new assets
- [ ] Existing location values should be stored in "label" field
- [ ] Exact location information should be stored separate from label

** Documentation
*** Case Sensitivity
- Data is stored as entered (case preservative)
- Attribute lists are all lowercased
- Search is always case insensitive

*** Date/Time values
- Uses 24 hour clock, displays using local time zone, stored as UTC
- [[http://www.unicode.org/reports/tr35/tr35-43/tr35-dates.html#Date_Format_Patterns][Date_Format_Patterns]]
