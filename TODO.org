* TODO

** Node.js Rewrite

- [DONE] Create a basic express.js application and get it running
- [DONE] Build a basic web interface with a simple Elm page (POC)
  - [DONE] Set up EJS template engine
  - [DONE] Learn express.js routing, set up / to an EJS view
  - [DONE] Copy the static assets from the old web app
  - [DONE] Set up mocha.js and chai for testing
  - [DONE] Use https://github.com/patrick-steele-idem/app-module-path-node
  - [DONE] Put dummy API controller in place, with tests
  - [DONE] Put web middleware on the "pages" router rather than the app
  - [DONE] Set up gulp build pipeline
  - [DONE] Ensure Elm code gets watched and automatically compiled
  - [DONE] Ensure the bootstrap CSS, fonts, and icons are working
  - [DONE] Remove everything referring to "phoenix"
- [DONE] Set up basic backend with PouchDB
  - [DONE] create the "tanuki" database in an appropriate location
  - [DONE] install design documents (e.g. by_tags)
- [DONE] Change all of the console output to winston logging statements
- [DONE] Looks like put() is better than post() for PouchDB
- [DONE] Rename `backend` to `lib`, and `index.js` to `backend.js`
- [DONE] Port backend code from Elixir to JavaScript
  - [DONE] Let backend errors bubble up to the caller
  - [DONE] https://github.com/lovell/sharp
  - [DONE] https://github.com/fluent-ffmpeg/node-fluent-ffmpeg
  - [DONE] Use node-lru-cache for thumbnail caching
- [DONE] Invoke `query()` with a `limit` of zero to populate the index after creating it
- [DONE] Implement the "import" route for the upload page to use
- [DONE] Ensure the Elm interface is working
- [DONE] Express is caching API requests, but should not
- [DONE] Elm interface should not show the >> expander when there are not enough attributes
- [DONE] Show appropriate placeholders for assets that do not have thumbnails
- [TODO] Figure out how to use layouts with EJS and express.js
  - apparently EJS uses partials instead of a layout
  - Sails.js somehow manages to have real layouts with EJS
- [TODO] Set the `production` flag in `gulpfile.js` based on environment
- [DONE] Configure morgan based on our configuration file
- [TODO] Look at https://moment.github.io/luxon/docs/ for a nice date/time library
- [TODO] Maybe use https://github.com/expressjs/csurf for CSRF protection

** General Items

- [TODO] Decide on the overall architecture
  - A) Rich desktop app, with data stored locally or on a remote drive
  - B) Lite desktop app, with backend running locally or on a remote host
- [TODO] Design the new import mechanism to replace incoming processor
  - Drag & drop and/or file selector
  - How to apply attributes to multiple assets
- [TODO] migrate the old data over to the new document format
  - the sha256 value becomes the document _id
- [TODO] Need to read `apiUrlPrefix` in Elm code from configuration file
  - currently it is modified at deployment time using `sed`
- [TODO] Look for means of ensuring LevelDB data integrity
  - Look into enabling extra LevelDB checks (`paranoidChecks`, `verifyChecksums`)
- [TODO] Use PouchDB/CouchDB replication to keep a local backup
  - Recovery is to replace corrupted DB with backup
  - Could just be something that is manually invoked as needed
- [TODO] Support HEIC/HEIF file formats
- [TODO] When performing image manipulations, invoke `sharp.withMetadata()` to preserve metadata
- [TODO] Add a "people" field
  - Need an admin screen to move a tag from "tags" to "people"
  - Maybe a generic "move" action:
    + Given a list of tags to be moved...
    + And the name of a field (e.g. "people")...
    + Move the given tags to the named field
- [TODO] Instead of a "topic" field, perhaps an "occasion" field instead.
  - For instance, "christina birthday".
  - Add back to incoming processor using the "^" separator.
  - Would be on details/edit page for benefit of uploading.
  - Maybe don't bother exposing on main page, just another field like caption.
- [TODO] api to perform database compaction
- [TODO] Decide what process manager to use; possibly launchd on macOS
  - http://expressjs.com/en/advanced/pm.html
- [TODO] Review express.js performance guidelines
  - http://expressjs.com/en/advanced/best-practice-performance.html
- [TODO] Define a production configuration (i.e. for the logging)

** Migration

- [TODO] Consider extracting more information from videos and images into database
  - Like the sorts of attributes that Photos uses to make smart albums

** Custom queries

- [TODO] Once a user has removed a custom query, invoke PouchDB's `db.viewCleanup()` to clean them up
  - Otherwise you get stale query results

** Web Interface

- [TODO] After changing an asset, need to refresh the tags, locations, years
- [DONE] Get the page border looking the same as before (banner is too close to the top)

** Incoming Processor

- [TODO] Consider whether we need the old incoming processor functionality
- [TODO] Implement the periodic running of the file importer
- [DONE] https://github.com/mattiasw/ExifReader
- [TODO] https://github.com/sindresorhus/passwd-user
- [TODO] use https://github.com/broofa/node-mime
- [TODO] add `image/heic` and `image/heif` to custom mimetypes

** Productization

- [TODO] Replace the web banner with something that looks good
- [TODO] Include list of all dependencies and their copyright/license as appropriate
  - fontawesome.io
