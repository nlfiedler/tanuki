#
# Copyright (c) 2018 Nathan Fiedler
#

# Our custom date/time that is represented as the number of milliseconds since
# January 1, 1970, 00:00:00 UTC, with leap seconds ignored.
scalar Date

# The Upload type is implemented by apollo-server and represents a file upload.
scalar Upload

# An `Asset` defines a single entity in the storage system. This typically
# refers to an image or video, but could by any type of file.
type Asset {
  # The unique asset identifier.
  id: ID!
  # The original filename of the asset when it was imported.
  filename: String!
  # Path of the asset in storage, relative to the base directory defined in
  # the configuration file as `assetPath`. Deleting this file will cause
  # some features to break with respect to that asset, so be careful.
  filepath: String!
  # The size in bytes of the asset.
  filesize: Int!
  # The date and time that best represents the asset. For images
  # with EXIF data, this may be the original date/time, while for
  # videos, it may be the creation time.
  datetime: Date!
  # The MIME type of the asset (e.g. "image/jpeg").
  mimetype: String!
  # The list of tags associated with this asset.
  tags: [String!]!
  # The date provided by the user.
  userdate: Date
  # A caption attributed to the asset.
  caption: String
  # For video assets, the duration in seconds.
  duration: Float
  # Location information for the asset.
  location: String
}

# `TagCount` indicates the number of assets with a given tag.
type TagCount {
  # The unique name of the tag.
  value: String!
  # The count of assets with this tag.
  count: Int!
}

# `YearCount` indicates the number of assets with a given year.
type YearCount {
  # The unique value for the year.
  value: Int!
  # The count of assets with this year.
  count: Int!
}

# `LocationCount` indicates the number of assets with a given location.
type LocationCount {
  # The unique value for the location.
  value: String!
  # The count of assets with this location.
  count: Int!
}

# `SearchResult` represents a single result from a query.
type SearchResult {
  # The identifier of the matching asset.
  id: ID!
  # The date/time for the matching asset.
  datetime: Date!
  # The filename for the matching asset.
  filename: String!
  # The location for the matching asset, if available.
  location: String
  # The thumbWidth is the pixel width of the wide version of the asset
  # thumbnail. It will be -1 if no thumbnail is possible for the asset media
  # type, and 0 if the asset does not have a thumbnail.
  thumbWidth: Int
  # The thumbHeight is the pixel height of the wide version of the asset
  # thumbnail. It will be -1 if no thumbnail is possible for the asset media
  # type, and 0 if the asset does not have a thumbnail.
  thumbHeight: Int
}

# `SearchMeta` is returned from the search query.
type SearchMeta {
  # The list of results retrieved via the query.
  results: [SearchResult!]!
  # The total number of matching assets in the system, useful for pagination.
  count: Int!
}

# `SearchParams` defines the various parameters by which to search for assets.
input SearchParams {
  # Tags that an asset should have. All should match.
  tags: [String]
  # Locations of an asset. At least one must match.
  locations: [String]
  # Date for filtering asset results. Only those assets whose canonical date
  # occurs _after_ this date will be returned.
  after: Date
  # Date for filtering asset results. Only those assets whose canonical date
  # occurs _before_ this date will be returned.
  before: Date
  # Find assets whose filename (e.g. img_3011.jpg) matches the one given.
  filename: String
  # Find assets whose mimetype (e.g. image/jpeg) matches the one given.
  mimetype: String
}

type Query {
  # Retrieve an asset by its unique identifier.
  asset(id: ID!): Asset
  # Look up an asset by the checksum. The checksum value must be prefixed with
  # the name of a hash function, such as `sha256-` (note the hyphen separator).
  # The current function in use is SHA-256, represented as `sha256`.
  lookup(checksum: String!): Asset
  # Return the total number of assets in the system.
  count: Int!
  # Search for assets by the given parameters.
  #
  # The count indicates how many results to return in a single query,
  # limited to a maximum of 10,000.
  #
  # The offset is useful for pagination.
  search(params: SearchParams!, count: Int = 10, offset: Int = 0): SearchMeta!
  # Retrieve the list of locations and their associated asset count.
  locations: [LocationCount!]!
  # Retrieve the list of tags and their associated asset count.
  tags: [TagCount!]!
  # Retrieve the list of years and their associated asset count.
  years: [YearCount!]!
}

# `AssetInput` is used to update the details of an asset.
input AssetInput {
  # New set of tags.
  tags: [String!]
  # New caption.
  caption: String
  # New location.
  location: String
  # A date/time that overrides intrinsic values; a null value clears the
  # custom field and reverts back to the intrinsic value.
  datetime: Date
  # New media type, useful for fixing assets where detection guessed wrong.
  # Beware that setting a wrong value means the asset will likely not display
  # correctly.
  mimetype: String
}

type Mutation {
  # Upload a file to the system, returning the identifier for this asset.
  # If an asset with the same checksum already exists, the identifier for
  # that asset will be returned.
  #
  # Upload is implemented by apollo-upload-server and apollo-upload-client.
  upload(file: Upload!): ID!
  # Update the asset with the given tags, caption, and date.
  #
  # The given date will override any dates already associated with the asset
  # (e.g. original date, imported date).
  update(id: ID!, asset: AssetInput!): Asset!
}

schema {
  query: Query
  mutation: Mutation
}
